#include <qpl/qpl.hpp>


template<typename T, qpl::size N>
using mat = std::array<std::array<T, N>, N>;

template<typename T, qpl::size N>
T matrix_determinant(mat<T, N> mat, qpl::size n = N) {
	T num1, num2, det = 1, total = 1; // Initialize result

	qpl::size index;

	// temporary array for storing row
	std::vector<T> temp(n + 1);

	// loop for traversing the diagonal elements
	for (qpl::size i = 0u; i < n; ++i) {
		index = i; // initialize the index

		// finding the index which has non zero value
		while (index < n && mat[index][i] == 0) {
			index++;
		}
		if (index == n) {
			// if there is non zero element
			// the determinant of matrix as zero
			continue;
		}
		if (index != i) {
			// loop for swapping the diagonal element row and
			// index row
			for (qpl::size j = 0u; j < n; ++j) {
				std::swap(mat[index][j], mat[i][j]);
			}
			// determinant sign changes when we shift rows
			// go through determinant properties
			det = det * std::pow(-1, index - i);
		}

		// storing the values of diagonal row elements
		for (qpl::size j = 0; j < n; ++j) {
			temp[j] = mat[i][j];
		}
		// traversing every row below the diagonal element
		for (qpl::size j = i + 1; j < n; ++j) {
			num1 = temp[i]; // value of diagonal element
			num2 = mat[j][i]; // value of next row element

			// traversing every column of row
			// and multiplying to every row
			for (qpl::size k = 0; k < n; ++k) {
				// multiplying to make the diagonal
				// element and next row element equal
				mat[j][k] = (num1 * mat[j][k]) - (num2 * temp[k]);
			}
			total = total * num1; // Det(kA)=kDet(A);
		}
	}

	// multiplying the diagonal elements to get determinant
	for (qpl::size i = 0; i < n; ++i) {
		det = det * mat[i][i];
	}
	return (det / total); // Det(kA)/k=Det(A);
}

namespace galois {
	constexpr auto add(int x, int y) {
		return x ^ y;
	}

	constexpr auto mul(int x, int y) {
		int z = 0;
		for (int i = 0; i < 8; ++i) {
			z ^= x & -(y & 1);
			y >>= 1;
			x <<= 1;
			x ^= (0x11B & -(x >> 8));
		}
		return z;
	}

	template<typename T>
	constexpr auto inverse(T x) {
		T z = x;
		for (int i = 0; i < 6; ++i) {
			z = galois::mul(z, z);
			z = galois::mul(z, x);
		}
		return galois::mul(z, z);
	}

	template<typename T>
	constexpr auto divide(T x, T y) {
		return galois::mul(x, galois::inverse(y));
	}
}

template<typename T, qpl::size N>
void print_matrix(mat<T, N> m) {
	for (auto& i : m) {
		qpl::print("[");
		for (auto& i : i) {
			qpl::print(qpl::str_spaced((int)i, 3), " ");
		}
		qpl::println("]");
	}
}

template<typename T, qpl::size N>
mat<T, N> galois_matrix_inverse(mat<T, N> M) {
	mat<T, N> R{}; //fills R with 0s
	for (unsigned i = 0; i < N; ++i) {
		R[i][i] = 1; //makes the matrix the identity matrix
	}
	for (unsigned i = 0; i < N; ++i) {

		//sets M[i][i] to 1, divide by row by inverse
		auto diagonal = M[i][i];
		auto inv = galois::inverse(diagonal);
		for (unsigned row = 0; row < N; ++row) {
			M[i][row] = galois::mul(inv, M[i][row]);
			R[i][row] = galois::mul(inv, R[i][row]);
		}

		//pivots the column
		for (unsigned col = 0; col < N; ++col) {
			if (col == i) continue;

			auto n = M[col][i];
			for (unsigned row = 0; row < N; ++row) {
				M[col][row] = galois::add(galois::mul(n, M[i][row]), M[col][row]);
				R[col][row] = galois::add(galois::mul(n, R[i][row]), R[col][row]);
			}
		}
	}
	return R;
}

template<typename T, qpl::size N>
mat<T, N> galois_matrix_multiply(const mat<T, N>& a, const mat<T, N>& b) {
	mat<T, N> result;
	for (qpl::size i = 0u; i < N; ++i) {
		std::array<T, N> sum{};
		for (qpl::size j = 0u; j < N; ++j) {
			for (qpl::size k = 0u; k < N; ++k) {
				sum[k] ^= galois::mul(a[j][k], b[i][j]);
			}
		}
		result[i] = sum;
	}
	return result;
}


constexpr auto sbox = std::array {
	std::array<qpl::u8, 256> { 0x62u, 0x57u, 0x93u, 0x47u, 0x08u, 0x44u, 0x41u, 0x61u, 0x78u, 0x10u, 0xb0u, 0x18u, 0xa4u, 0x54u, 0xa0u, 0x12u, 0x55u, 0xdcu, 0x6cu, 0xb6u, 0xd8u, 0xc6u, 0x21u, 0x30u, 0xeeu, 0xfau, 0xabu, 0xaeu, 0xd5u, 0x53u, 0x06u, 0x79u, 0x8bu, 0x59u, 0xbfu, 0xe6u, 0x46u, 0x0du, 0xccu, 0x74u, 0x22u, 0x43u, 0x56u, 0xddu, 0x83u, 0xd2u, 0x42u, 0x35u, 0x37u, 0xfcu, 0x20u, 0xc0u, 0xb9u, 0xc1u, 0x5cu, 0x2du, 0x8eu, 0x60u, 0xbbu, 0x32u, 0xb3u, 0x81u, 0xdfu, 0x8du, 0xb4u, 0xecu, 0xd3u, 0x1cu, 0x36u, 0x9au, 0xe1u, 0x86u, 0x15u, 0xe7u, 0xe9u, 0xefu, 0x72u, 0x1au, 0x38u, 0x11u, 0xcfu, 0x00u, 0x17u, 0x90u, 0x96u, 0x8cu, 0xa7u, 0x4du, 0x3cu, 0x05u, 0x40u, 0x50u, 0x5du, 0xb7u, 0x85u, 0xaau, 0x28u, 0x9eu, 0x75u, 0xebu, 0x91u, 0x5eu, 0x24u, 0xf2u, 0xc2u, 0x2cu, 0x13u, 0x25u, 0x0fu, 0xc7u, 0x73u, 0xf9u, 0x16u, 0x65u, 0x82u, 0xb2u, 0xfbu, 0x70u, 0x2fu, 0xbcu, 0x5fu, 0x9du, 0x89u, 0xa3u, 0x68u, 0x92u, 0x09u, 0xdbu, 0x97u, 0xb8u, 0x3fu, 0x27u, 0xcau, 0x88u, 0xa1u, 0xfdu, 0x45u, 0x66u, 0xeau, 0x39u, 0xe5u, 0xdau, 0x7au, 0x51u, 0x34u, 0xf0u, 0x7du, 0x1bu, 0x6eu, 0x0au, 0xadu, 0x76u, 0x9cu, 0xe0u, 0x94u, 0x0eu, 0xf7u, 0x07u, 0xe8u, 0xa8u, 0x4eu, 0xf8u, 0x26u, 0xdeu, 0xe2u, 0xc4u, 0x03u, 0xc5u, 0x02u, 0x3bu, 0x01u, 0x48u, 0xf6u, 0x14u, 0x3du, 0xfeu, 0xa6u, 0x49u, 0x52u, 0x77u, 0x4cu, 0xacu, 0xafu, 0xceu, 0x31u, 0x95u, 0xb5u, 0xd1u, 0x87u, 0x04u, 0xf1u, 0x4bu, 0xd4u, 0x63u, 0x7fu, 0xcbu, 0x64u, 0xbdu, 0x1du, 0x29u, 0x7eu, 0xf5u, 0xd0u, 0xe4u, 0xd6u, 0xe3u, 0xf3u, 0x9bu, 0xc8u, 0x6du, 0xc9u, 0xbeu, 0x5au, 0x67u, 0x2au, 0xedu, 0x2bu, 0x84u, 0xffu, 0xd9u, 0x7cu, 0x7bu, 0x58u, 0x98u, 0x71u, 0x3eu, 0x19u, 0x9fu, 0x3au, 0x6bu, 0x4fu, 0xb1u, 0xf4u, 0x5bu, 0xcdu, 0xd7u, 0x0bu, 0x33u, 0x6fu, 0x8au, 0x1eu, 0xc3u, 0x0cu, 0xbau, 0xa5u, 0x80u, 0xa9u, 0x2eu, 0x69u, 0x4au, 0x6au, 0x99u, 0x23u, 0xa2u, 0x1fu, 0x8fu },
	std::array<qpl::u8, 256> { 0x53u, 0x28u, 0xe1u, 0x09u, 0x66u, 0xc6u, 0xdbu, 0xe6u, 0x7au, 0x33u, 0x80u, 0xc2u, 0x74u, 0x6du, 0x5au, 0xbdu, 0xa9u, 0xa5u, 0xc5u, 0x11u, 0xf5u, 0x2eu, 0x4fu, 0x95u, 0xcfu, 0xbbu, 0x9cu, 0xb4u, 0x01u, 0x99u, 0x9au, 0x35u, 0xf1u, 0x3bu, 0x86u, 0x61u, 0xd2u, 0x97u, 0x0du, 0x5fu, 0x20u, 0xaeu, 0xb3u, 0xfau, 0xb6u, 0xd8u, 0x17u, 0xadu, 0x7fu, 0xf4u, 0x63u, 0xa4u, 0x60u, 0x7eu, 0x37u, 0x5du, 0x72u, 0xf0u, 0xb1u, 0x58u, 0x0cu, 0x84u, 0xf8u, 0x0fu, 0x64u, 0x5cu, 0x9eu, 0x45u, 0xccu, 0x6cu, 0xc7u, 0x3au, 0xfbu, 0xfdu, 0x83u, 0x32u, 0x82u, 0x39u, 0xabu, 0x81u, 0x69u, 0x21u, 0x38u, 0x7cu, 0x94u, 0x73u, 0x76u, 0x10u, 0xe9u, 0x7du, 0xa3u, 0x22u, 0x55u, 0xbfu, 0x03u, 0x4au, 0x88u, 0x91u, 0xf6u, 0x41u, 0xb2u, 0xffu, 0xacu, 0xf3u, 0xafu, 0xa1u, 0xceu, 0xa8u, 0x18u, 0xb5u, 0x13u, 0x51u, 0xe5u, 0x62u, 0x19u, 0x2fu, 0xe2u, 0xbau, 0x50u, 0x2du, 0xdfu, 0xe8u, 0x65u, 0xf9u, 0xd5u, 0x79u, 0xe4u, 0xeeu, 0xb8u, 0x47u, 0x12u, 0xc3u, 0x59u, 0x3eu, 0x87u, 0xfcu, 0x0bu, 0xd4u, 0xb7u, 0x8cu, 0x52u, 0x89u, 0x0eu, 0x1cu, 0x1du, 0x06u, 0xcau, 0xc9u, 0x16u, 0x04u, 0xedu, 0xcdu, 0x9fu, 0xfeu, 0x77u, 0x3cu, 0x31u, 0xefu, 0x75u, 0xdcu, 0xf2u, 0x1au, 0x30u, 0xd0u, 0x43u, 0xddu, 0xd7u, 0x8fu, 0x29u, 0xaau, 0x2cu, 0x24u, 0xdeu, 0x08u, 0x4bu, 0xc0u, 0xa7u, 0x02u, 0xeau, 0x92u, 0x25u, 0xa6u, 0x96u, 0x42u, 0x9bu, 0xe0u, 0x1bu, 0x8du, 0x2bu, 0x40u, 0x6bu, 0x93u, 0x36u, 0x9du, 0x8au, 0x1eu, 0x3fu, 0x8bu, 0x6eu, 0xdau, 0xb0u, 0x26u, 0x67u, 0x00u, 0xe3u, 0x44u, 0xbeu, 0xa2u, 0x6au, 0xa0u, 0x56u, 0x4du, 0x4eu, 0x71u, 0xcbu, 0x46u, 0x15u, 0x27u, 0x3du, 0xd3u, 0x34u, 0x54u, 0x85u, 0xc4u, 0x05u, 0xb9u, 0xebu, 0x57u, 0x5eu, 0xe7u, 0x4cu, 0xd9u, 0xecu, 0x70u, 0x49u, 0xbcu, 0x5bu, 0x2au, 0xd6u, 0x23u, 0x90u, 0x8eu, 0x48u, 0x1fu, 0x7bu, 0xc8u, 0x68u, 0x6fu, 0xc1u, 0x98u, 0xd1u, 0xf7u, 0x78u, 0x07u, 0x14u, 0x0au },
	std::array<qpl::u8, 256> { 0xdcu, 0xc5u, 0xbcu, 0x06u, 0x50u, 0x29u, 0xa0u, 0x20u, 0x72u, 0xceu, 0x89u, 0x6bu, 0xf9u, 0x09u, 0x35u, 0xc0u, 0x39u, 0xe1u, 0xc8u, 0xb0u, 0xebu, 0xd0u, 0x24u, 0x2bu, 0xb7u, 0x3au, 0x0fu, 0x5au, 0x3du, 0xd9u, 0xefu, 0x26u, 0x31u, 0x4eu, 0x62u, 0xf1u, 0x7bu, 0xd6u, 0x1fu, 0x36u, 0x10u, 0xfau, 0x99u, 0x8bu, 0xd1u, 0x37u, 0x65u, 0x8fu, 0xd2u, 0xa7u, 0xd4u, 0xe0u, 0x44u, 0x6eu, 0xadu, 0x4bu, 0xa6u, 0x9eu, 0x9bu, 0xe3u, 0x05u, 0x1au, 0x67u, 0x9cu, 0xc4u, 0x81u, 0xb3u, 0xf4u, 0x2au, 0x33u, 0x17u, 0xf0u, 0x04u, 0x8cu, 0x9fu, 0xcau, 0xe8u, 0xd5u, 0x5fu, 0x84u, 0xb2u, 0x7au, 0xb6u, 0x4au, 0x3eu, 0x98u, 0xe4u, 0x63u, 0x1du, 0x77u, 0x8eu, 0x38u, 0x4fu, 0x40u, 0x74u, 0xeau, 0xacu, 0x46u, 0x51u, 0xeeu, 0xb8u, 0x2eu, 0x5eu, 0x4du, 0x34u, 0x93u, 0x23u, 0xa2u, 0xf5u, 0x78u, 0x94u, 0x02u, 0x79u, 0x01u, 0x9du, 0x70u, 0x7eu, 0x7cu, 0xc2u, 0x53u, 0x55u, 0x28u, 0x83u, 0x21u, 0xaeu, 0x45u, 0xa3u, 0x92u, 0xfbu, 0x96u, 0x95u, 0xb5u, 0x58u, 0xe2u, 0x49u, 0xcbu, 0x9au, 0xafu, 0xedu, 0xd8u, 0x6fu, 0x0du, 0x0eu, 0xa5u, 0x16u, 0x88u, 0x69u, 0xb4u, 0x41u, 0x22u, 0x00u, 0xbau, 0x1bu, 0x2du, 0xc7u, 0xa9u, 0x25u, 0x08u, 0xccu, 0xaau, 0x47u, 0xa8u, 0xabu, 0xcdu, 0x59u, 0xe7u, 0x11u, 0xdau, 0x6au, 0x52u, 0x6du, 0x3bu, 0xc9u, 0x2cu, 0x1cu, 0x0bu, 0x2fu, 0xecu, 0xbdu, 0x7fu, 0x8du, 0x19u, 0x27u, 0x75u, 0x15u, 0xe9u, 0x5cu, 0xf8u, 0x0au, 0xffu, 0xd3u, 0x82u, 0x13u, 0x18u, 0xf7u, 0xa1u, 0xe6u, 0x48u, 0x5bu, 0x54u, 0x60u, 0xcfu, 0xfdu, 0x64u, 0xf2u, 0x87u, 0x43u, 0xf6u, 0xbfu, 0xddu, 0x85u, 0x76u, 0xc3u, 0x07u, 0xe5u, 0x61u, 0x86u, 0xa4u, 0x1eu, 0x3fu, 0xdbu, 0x30u, 0xfcu, 0x4cu, 0x71u, 0x80u, 0x73u, 0xbeu, 0x03u, 0x7du, 0x14u, 0x56u, 0x12u, 0x97u, 0x68u, 0xb9u, 0x3cu, 0x6cu, 0x66u, 0xfeu, 0x90u, 0x0cu, 0x57u, 0xc1u, 0xc6u, 0x42u, 0xbbu, 0xdfu, 0xf3u, 0x5du, 0xdeu, 0x91u, 0xb1u, 0x32u, 0xd7u, 0x8au },
	std::array<qpl::u8, 256> { 0xe6u, 0xb1u, 0xcdu, 0xadu, 0xe7u, 0x2cu, 0x80u, 0xbcu, 0x6du, 0x33u, 0xa5u, 0xd9u, 0x98u, 0x0fu, 0x6fu, 0xcbu, 0xb3u, 0x86u, 0x48u, 0x00u, 0x0au, 0x8au, 0x4fu, 0x20u, 0x95u, 0x01u, 0x47u, 0xc2u, 0xcfu, 0xedu, 0x34u, 0x18u, 0x65u, 0x71u, 0x2fu, 0x27u, 0x38u, 0xebu, 0xddu, 0x50u, 0xdbu, 0xeeu, 0x19u, 0x7eu, 0xfdu, 0xaau, 0x23u, 0x3au, 0x07u, 0xdfu, 0xf7u, 0x99u, 0x24u, 0x42u, 0x3bu, 0x0eu, 0x04u, 0xe0u, 0x02u, 0x15u, 0xa0u, 0x56u, 0x87u, 0xc7u, 0x21u, 0xeau, 0x22u, 0x46u, 0xa4u, 0xdcu, 0x84u, 0x73u, 0xe3u, 0xf3u, 0xb5u, 0xe4u, 0xefu, 0xf4u, 0x28u, 0x0bu, 0xcau, 0x6eu, 0xb4u, 0x9au, 0x4eu, 0x49u, 0x08u, 0x90u, 0x5bu, 0x0du, 0x06u, 0x09u, 0xc3u, 0x31u, 0xa2u, 0x2au, 0x7cu, 0x62u, 0x92u, 0x9du, 0xdeu, 0x26u, 0x35u, 0x1du, 0x29u, 0x6au, 0x81u, 0x1fu, 0xf9u, 0x03u, 0xccu, 0xfbu, 0xa8u, 0x6bu, 0xb9u, 0xf6u, 0x39u, 0xd2u, 0xb8u, 0xfeu, 0x51u, 0x2eu, 0xc5u, 0x54u, 0x70u, 0x44u, 0x8cu, 0x68u, 0xc1u, 0x9fu, 0x3eu, 0x11u, 0xc4u, 0xd3u, 0xc0u, 0x1au, 0x5eu, 0x36u, 0xd5u, 0xf1u, 0xa9u, 0x43u, 0x64u, 0x16u, 0x2bu, 0x9cu, 0x12u, 0x55u, 0x58u, 0xf8u, 0x82u, 0xc9u, 0xbdu, 0x97u, 0xabu, 0x74u, 0x05u, 0x89u, 0x17u, 0x14u, 0x5fu, 0x83u, 0x53u, 0x7au, 0xd7u, 0xacu, 0x0cu, 0x10u, 0xafu, 0xb7u, 0x72u, 0x5au, 0x67u, 0xe9u, 0x94u, 0x37u, 0xe1u, 0x25u, 0x59u, 0x4au, 0xa1u, 0xf2u, 0x61u, 0x7du, 0xb6u, 0xf0u, 0xb0u, 0xd6u, 0xd0u, 0x52u, 0x8eu, 0xc8u, 0x66u, 0xa6u, 0x76u, 0x9bu, 0xceu, 0x8du, 0x4cu, 0xe5u, 0x41u, 0xf5u, 0xb2u, 0x77u, 0x30u, 0x32u, 0x8fu, 0xaeu, 0xecu, 0xbau, 0x3du, 0x91u, 0xa7u, 0xbbu, 0x4du, 0xbfu, 0xdau, 0x63u, 0x57u, 0xbeu, 0x13u, 0xd4u, 0x3cu, 0xfau, 0xd8u, 0x85u, 0x4bu, 0x78u, 0x7fu, 0x60u, 0x2du, 0x7bu, 0x45u, 0xe8u, 0x75u, 0x69u, 0xe2u, 0xa3u, 0x5cu, 0x1eu, 0x8bu, 0x93u, 0x88u, 0xd1u, 0x9eu, 0xfcu, 0x79u, 0x5du, 0x96u, 0xffu, 0xc6u, 0x3fu, 0x6cu, 0x1cu, 0x40u, 0x1bu },
	std::array<qpl::u8, 256> { 0x68u, 0x9du, 0xecu, 0x28u, 0x26u, 0xb9u, 0xa3u, 0x12u, 0xeau, 0x5au, 0xa6u, 0x80u, 0x8bu, 0xbdu, 0x9eu, 0x56u, 0x50u, 0xe7u, 0x18u, 0xfau, 0xe2u, 0xd2u, 0xb1u, 0xf3u, 0xa8u, 0x0bu, 0x49u, 0x23u, 0xfcu, 0x1bu, 0xe9u, 0x61u, 0x07u, 0x9fu, 0xaeu, 0x0cu, 0x6eu, 0x58u, 0xbbu, 0x29u, 0x54u, 0x90u, 0xa7u, 0xe5u, 0x6bu, 0x36u, 0xb7u, 0x81u, 0x64u, 0x45u, 0xdbu, 0x37u, 0x57u, 0x82u, 0x9au, 0x65u, 0xe4u, 0x51u, 0xb3u, 0x10u, 0x27u, 0x08u, 0x2bu, 0x4cu, 0x17u, 0xbau, 0x09u, 0xabu, 0x95u, 0x67u, 0x5fu, 0x9cu, 0x70u, 0xddu, 0x3du, 0xf2u, 0x94u, 0x25u, 0x98u, 0x3bu, 0xf4u, 0x55u, 0x2du, 0x7du, 0x78u, 0x2fu, 0x39u, 0x7bu, 0xb6u, 0xdeu, 0xdau, 0xc7u, 0xcfu, 0x8au, 0x21u, 0x69u, 0xfeu, 0x85u, 0x9bu, 0x4du, 0x0eu, 0x63u, 0xa4u, 0xadu, 0x03u, 0x83u, 0xfbu, 0xcbu, 0x5cu, 0xf9u, 0x73u, 0x3fu, 0xd3u, 0x31u, 0x74u, 0xd7u, 0xd8u, 0xc8u, 0xb8u, 0x52u, 0x32u, 0x1cu, 0x44u, 0xf5u, 0x76u, 0x35u, 0xc3u, 0xa0u, 0xe6u, 0x7eu, 0xafu, 0x5du, 0x6fu, 0x42u, 0x92u, 0xbfu, 0x20u, 0xd0u, 0x14u, 0xf6u, 0x4eu, 0x30u, 0x04u, 0xacu, 0xcau, 0x4fu, 0xf0u, 0xc9u, 0x00u, 0x11u, 0x3cu, 0x93u, 0xa9u, 0xc4u, 0xb5u, 0x13u, 0x1au, 0x8du, 0xedu, 0x8cu, 0xe3u, 0xb2u, 0x7au, 0xaau, 0x88u, 0xd6u, 0x34u, 0x96u, 0x60u, 0xd9u, 0x3au, 0x75u, 0x86u, 0x0au, 0xf1u, 0xfdu, 0x84u, 0x89u, 0x79u, 0xc6u, 0x05u, 0xb0u, 0x16u, 0xbcu, 0x2cu, 0x6cu, 0xbeu, 0x1du, 0x6au, 0xa5u, 0x43u, 0xeeu, 0xe1u, 0x1eu, 0xceu, 0xf8u, 0x4bu, 0x5eu, 0xc5u, 0x66u, 0x53u, 0xcdu, 0xccu, 0x62u, 0xdcu, 0x0fu, 0x0du, 0x24u, 0x01u, 0x38u, 0x87u, 0xefu, 0x71u, 0xd1u, 0xc2u, 0x19u, 0x8eu, 0x7fu, 0xc0u, 0xe0u, 0x5bu, 0x8fu, 0xdfu, 0x33u, 0x02u, 0x40u, 0x2au, 0x6du, 0x2eu, 0x48u, 0xa1u, 0x15u, 0x46u, 0x59u, 0x97u, 0x91u, 0xf7u, 0x22u, 0xc1u, 0xa2u, 0x7cu, 0x3eu, 0xffu, 0xe8u, 0x72u, 0xd4u, 0xb4u, 0xebu, 0x06u, 0xd5u, 0x1fu, 0x4au, 0x41u, 0x47u, 0x99u, 0x77u },
	std::array<qpl::u8, 256> { 0xd3u, 0x11u, 0x35u, 0xecu, 0xc8u, 0x76u, 0xafu, 0xc5u, 0xc0u, 0x56u, 0xaau, 0xe5u, 0x33u, 0xccu, 0x1du, 0xdcu, 0xf3u, 0x9du, 0x00u, 0xb2u, 0xa6u, 0xa2u, 0xc2u, 0x69u, 0x9eu, 0x2au, 0x51u, 0x6au, 0x79u, 0x67u, 0x8au, 0x16u, 0xaeu, 0x6du, 0x19u, 0xa1u, 0x89u, 0x95u, 0x06u, 0xd6u, 0xd0u, 0xceu, 0x13u, 0xe7u, 0x8fu, 0xc9u, 0x5au, 0x74u, 0x73u, 0x47u, 0x18u, 0x45u, 0xf2u, 0x83u, 0x04u, 0xb7u, 0x93u, 0x6fu, 0x58u, 0x5eu, 0x91u, 0x9fu, 0x8du, 0x07u, 0x02u, 0x1fu, 0xc3u, 0x61u, 0x68u, 0x71u, 0xfcu, 0xbeu, 0x4bu, 0x24u, 0xa3u, 0x23u, 0xbbu, 0x70u, 0x87u, 0x65u, 0x59u, 0x4au, 0x9au, 0xfbu, 0x0cu, 0x7fu, 0x3fu, 0x4fu, 0xdau, 0x88u, 0x9cu, 0xd7u, 0x31u, 0x1bu, 0x7eu, 0xf8u, 0xb4u, 0x7cu, 0x60u, 0x22u, 0xe3u, 0x5cu, 0xfdu, 0x43u, 0xa0u, 0xbcu, 0xcfu, 0x12u, 0xf5u, 0x53u, 0x80u, 0x8bu, 0x54u, 0xbdu, 0x66u, 0x8eu, 0x6bu, 0x86u, 0x20u, 0x78u, 0xb5u, 0x9bu, 0xe9u, 0xb0u, 0x77u, 0x55u, 0x82u, 0xe1u, 0x4du, 0xf7u, 0x7au, 0x1eu, 0x7bu, 0x96u, 0x72u, 0xd9u, 0x40u, 0xfeu, 0x84u, 0x3cu, 0x41u, 0x98u, 0x92u, 0x63u, 0x14u, 0x94u, 0xd4u, 0xa8u, 0x4cu, 0x0au, 0x2cu, 0xc1u, 0x57u, 0x2fu, 0x38u, 0xf4u, 0x42u, 0xbau, 0x85u, 0xc6u, 0xd8u, 0x28u, 0x2du, 0x2eu, 0x5du, 0xeeu, 0x50u, 0x15u, 0xacu, 0xc7u, 0xf1u, 0xcdu, 0x6eu, 0xd5u, 0x25u, 0x81u, 0x0eu, 0x05u, 0xfau, 0xcau, 0x7du, 0x37u, 0xffu, 0xf6u, 0x08u, 0x03u, 0xefu, 0xd2u, 0xdfu, 0xd1u, 0x4eu, 0x6cu, 0xb3u, 0x1au, 0x34u, 0xa9u, 0x75u, 0x48u, 0x64u, 0x36u, 0xc4u, 0x52u, 0xb1u, 0x39u, 0x29u, 0xa4u, 0xadu, 0x5bu, 0x0bu, 0x01u, 0x8cu, 0x26u, 0xe4u, 0x97u, 0x30u, 0x44u, 0x3bu, 0x0fu, 0xe6u, 0x2bu, 0xa7u, 0x0du, 0x32u, 0x21u, 0xabu, 0xb8u, 0xbfu, 0xe0u, 0x17u, 0x27u, 0xddu, 0xcbu, 0xe2u, 0xb6u, 0x10u, 0xdeu, 0x3du, 0x3eu, 0x3au, 0x62u, 0xe8u, 0x46u, 0x1cu, 0xb9u, 0x5fu, 0x49u, 0xedu, 0xf0u, 0x09u, 0x99u, 0xa5u, 0xebu, 0xf9u, 0xdbu, 0xeau, 0x90u },
	std::array<qpl::u8, 256> { 0xb2u, 0xd0u, 0xdcu, 0x50u, 0x6fu, 0xb9u, 0x5bu, 0x5du, 0xa3u, 0x21u, 0x92u, 0x6cu, 0xfdu, 0x0eu, 0x15u, 0x20u, 0xc3u, 0x43u, 0x2du, 0x60u, 0x38u, 0x16u, 0xb3u, 0x53u, 0x4bu, 0x47u, 0xc7u, 0x8du, 0xc5u, 0x4fu, 0x4du, 0xf4u, 0xd5u, 0x44u, 0xf1u, 0x1bu, 0xa5u, 0x2fu, 0x36u, 0xaeu, 0x57u, 0x72u, 0x75u, 0xceu, 0xc2u, 0x10u, 0x2au, 0xcau, 0xb7u, 0x62u, 0x59u, 0xe4u, 0x00u, 0x4eu, 0x6bu, 0x86u, 0x83u, 0xb0u, 0xe3u, 0x13u, 0x85u, 0x2cu, 0xe1u, 0xe9u, 0x73u, 0xa4u, 0x89u, 0x0du, 0x8bu, 0x48u, 0xc8u, 0x98u, 0xa8u, 0x42u, 0x77u, 0xe5u, 0xbfu, 0xd1u, 0x27u, 0x03u, 0x71u, 0xe7u, 0x37u, 0xbbu, 0x26u, 0xf6u, 0xd9u, 0x05u, 0xe2u, 0x78u, 0x8fu, 0x31u, 0xebu, 0x3du, 0x80u, 0x19u, 0xcdu, 0x7bu, 0x63u, 0x39u, 0xa0u, 0xbdu, 0x11u, 0x7eu, 0x99u, 0xe6u, 0xa1u, 0x0bu, 0x67u, 0x04u, 0x74u, 0xfeu, 0x64u, 0x1cu, 0x7cu, 0xdbu, 0x01u, 0x9bu, 0xc0u, 0xffu, 0x7au, 0x2eu, 0x97u, 0x30u, 0xe8u, 0xa9u, 0xb4u, 0xa7u, 0x56u, 0xcfu, 0x87u, 0x02u, 0x82u, 0x76u, 0xc1u, 0xaau, 0x5cu, 0x22u, 0x24u, 0x8au, 0x7fu, 0xb1u, 0x6au, 0x5fu, 0x23u, 0xe0u, 0x0au, 0x51u, 0xfbu, 0x96u, 0xf5u, 0xc9u, 0xecu, 0xc6u, 0x33u, 0xd3u, 0x9au, 0xa2u, 0xf2u, 0x25u, 0xf3u, 0x7du, 0x55u, 0xdeu, 0x81u, 0x2bu, 0xbeu, 0x17u, 0xdau, 0x4au, 0xf0u, 0x5eu, 0x94u, 0x54u, 0x61u, 0x32u, 0xd4u, 0x5au, 0xc4u, 0x95u, 0xadu, 0x93u, 0xb8u, 0x29u, 0x34u, 0xbau, 0x6du, 0xb5u, 0xb6u, 0xd7u, 0x9cu, 0x9du, 0x1fu, 0xfau, 0x0cu, 0x88u, 0x9eu, 0x70u, 0xeeu, 0x3au, 0x08u, 0x35u, 0xddu, 0x40u, 0x66u, 0xafu, 0x4cu, 0x69u, 0x3eu, 0xd6u, 0x91u, 0x8eu, 0xbcu, 0x28u, 0x41u, 0x09u, 0xa6u, 0xabu, 0xedu, 0x0fu, 0x8cu, 0x3cu, 0x3bu, 0xccu, 0x14u, 0x65u, 0xd8u, 0x52u, 0x68u, 0xcbu, 0x90u, 0xd2u, 0x9fu, 0x84u, 0x45u, 0xf7u, 0x07u, 0xefu, 0x58u, 0x06u, 0x1du, 0x12u, 0x6eu, 0x1eu, 0x79u, 0x49u, 0xfcu, 0x18u, 0xeau, 0xacu, 0xf8u, 0x1au, 0x3fu, 0xf9u, 0x46u, 0xdfu },
	std::array<qpl::u8, 256> { 0x77u, 0x1fu, 0xe5u, 0x18u, 0x91u, 0x78u, 0x4eu, 0x41u, 0x30u, 0x87u, 0x32u, 0xecu, 0xc2u, 0xc3u, 0xffu, 0xfeu, 0xa3u, 0xd6u, 0x4du, 0x68u, 0x8bu, 0xf3u, 0xb5u, 0xc0u, 0xd8u, 0x93u, 0xdcu, 0x21u, 0x44u, 0xe1u, 0x3fu, 0x05u, 0x5du, 0x38u, 0x07u, 0x4fu, 0xb7u, 0x06u, 0x3du, 0x45u, 0x51u, 0xa8u, 0x57u, 0xa4u, 0x62u, 0x3bu, 0x0eu, 0x99u, 0xccu, 0xc1u, 0xd5u, 0x36u, 0x67u, 0x31u, 0x08u, 0x22u, 0xc8u, 0x42u, 0xefu, 0x5au, 0x01u, 0x04u, 0x0bu, 0x8eu, 0xf0u, 0xaau, 0xc4u, 0x19u, 0x72u, 0x5cu, 0x9cu, 0x6eu, 0x8cu, 0xd1u, 0xdbu, 0xddu, 0x5eu, 0x79u, 0x7fu, 0xb0u, 0xf1u, 0xfcu, 0x2cu, 0xedu, 0x4bu, 0x97u, 0x0au, 0x1au, 0xc7u, 0x80u, 0x7bu, 0xaeu, 0x58u, 0x27u, 0x2du, 0x1eu, 0x17u, 0x8fu, 0x43u, 0xf7u, 0xcdu, 0xd2u, 0xceu, 0x0cu, 0x24u, 0xabu, 0xbau, 0xbbu, 0xa6u, 0xeeu, 0x65u, 0x09u, 0x73u, 0x9bu, 0xe3u, 0xd9u, 0x9au, 0x3au, 0x82u, 0x40u, 0x26u, 0x64u, 0xf4u, 0xa7u, 0xd4u, 0x96u, 0xe0u, 0xf2u, 0xcfu, 0x28u, 0xe8u, 0x86u, 0xb8u, 0x54u, 0xbcu, 0x0du, 0x53u, 0xe4u, 0x7au, 0x69u, 0x2bu, 0x63u, 0xdeu, 0x52u, 0xe6u, 0xd0u, 0x9fu, 0x94u, 0x1cu, 0x20u, 0xb6u, 0x81u, 0x83u, 0x6du, 0x1du, 0x9eu, 0x7du, 0xb9u, 0x10u, 0x60u, 0x6bu, 0x6au, 0x25u, 0x23u, 0x47u, 0xafu, 0x29u, 0xcbu, 0x5bu, 0x33u, 0x56u, 0x11u, 0xa0u, 0xa1u, 0x9du, 0x02u, 0xb1u, 0x34u, 0x03u, 0xbdu, 0xc6u, 0x8du, 0x7cu, 0x2au, 0xacu, 0xb2u, 0xf9u, 0x55u, 0xebu, 0xd7u, 0xfau, 0x12u, 0x95u, 0x6cu, 0x59u, 0x49u, 0x00u, 0x85u, 0xdau, 0x8au, 0x71u, 0x98u, 0x75u, 0x74u, 0x6fu, 0x2fu, 0x84u, 0x13u, 0x14u, 0x89u, 0x61u, 0xfdu, 0xa9u, 0x48u, 0x39u, 0x4au, 0x70u, 0xfbu, 0xbeu, 0x88u, 0xb4u, 0xe2u, 0x37u, 0x76u, 0xadu, 0xe7u, 0xd3u, 0xc5u, 0x92u, 0xb3u, 0x35u, 0xf6u, 0x3eu, 0x2eu, 0x4cu, 0xa5u, 0xeau, 0xbfu, 0x66u, 0xa2u, 0x7eu, 0x0fu, 0x16u, 0xe9u, 0x46u, 0x50u, 0xc9u, 0xf8u, 0xf5u, 0x3cu, 0x1bu, 0xcau, 0xdfu, 0x5fu, 0x90u, 0x15u },
	std::array<qpl::u8, 256> { 0x2du, 0xfcu, 0x69u, 0xbeu, 0x65u, 0xd3u, 0x73u, 0xa3u, 0xddu, 0x32u, 0xa2u, 0x06u, 0x55u, 0xf2u, 0xbdu, 0x4du, 0xf9u, 0x7fu, 0xbbu, 0x59u, 0x4au, 0xc9u, 0x9du, 0x35u, 0x66u, 0x37u, 0xe0u, 0xa1u, 0x5du, 0xc1u, 0xfeu, 0x53u, 0x31u, 0x94u, 0x30u, 0xb7u, 0x43u, 0x10u, 0x72u, 0xf3u, 0x7du, 0x38u, 0x46u, 0x36u, 0xb9u, 0xfdu, 0xc3u, 0x64u, 0x47u, 0x6fu, 0xb8u, 0x8au, 0xa7u, 0x7au, 0x2fu, 0x5eu, 0x81u, 0xf5u, 0x88u, 0xf8u, 0x89u, 0x49u, 0xb2u, 0x5au, 0x25u, 0xd5u, 0xe9u, 0xedu, 0xc4u, 0x51u, 0x0bu, 0x08u, 0x90u, 0xceu, 0x11u, 0x19u, 0x92u, 0xa9u, 0x68u, 0x82u, 0xcau, 0x34u, 0x8fu, 0x7cu, 0xc6u, 0x29u, 0xb1u, 0xa8u, 0xa0u, 0x78u, 0x12u, 0x50u, 0x03u, 0x2eu, 0xb3u, 0x1du, 0x21u, 0x7bu, 0x3au, 0x0du, 0x13u, 0x9au, 0xc7u, 0x5cu, 0x1fu, 0x9fu, 0x5fu, 0x0au, 0xdcu, 0xaau, 0xadu, 0xd9u, 0x84u, 0x17u, 0x8eu, 0x41u, 0x1au, 0x27u, 0x14u, 0xcdu, 0x4fu, 0x22u, 0x5bu, 0x24u, 0x93u, 0xcfu, 0x02u, 0x48u, 0xf7u, 0x61u, 0x1eu, 0xdbu, 0xf6u, 0x42u, 0x71u, 0x01u, 0xe7u, 0xe6u, 0xdfu, 0x54u, 0xdau, 0xeau, 0x1cu, 0x3du, 0xa4u, 0xd1u, 0x80u, 0x0fu, 0x07u, 0xf4u, 0xb0u, 0x6au, 0xffu, 0xbfu, 0xacu, 0x6eu, 0x79u, 0x83u, 0xc2u, 0x26u, 0xb6u, 0x4bu, 0xa5u, 0x0eu, 0x15u, 0x3eu, 0xf1u, 0x3bu, 0x8cu, 0xccu, 0x6cu, 0x58u, 0x99u, 0x77u, 0xbcu, 0xecu, 0x95u, 0x63u, 0x60u, 0x00u, 0xc0u, 0xd8u, 0xe4u, 0x05u, 0x3fu, 0x75u, 0xe2u, 0x39u, 0x28u, 0xe1u, 0xebu, 0x6du, 0xfau, 0x85u, 0xe5u, 0x2au, 0xa6u, 0xc8u, 0x1bu, 0xe3u, 0x96u, 0xc5u, 0xd4u, 0xd6u, 0xd0u, 0x33u, 0x8du, 0xd2u, 0xb4u, 0xdeu, 0x20u, 0x9cu, 0x74u, 0x91u, 0x18u, 0x7eu, 0xeeu, 0x56u, 0xaeu, 0x9eu, 0xf0u, 0x70u, 0x45u, 0x76u, 0xe8u, 0xd7u, 0x98u, 0x44u, 0x57u, 0x0cu, 0x52u, 0x04u, 0x97u, 0x23u, 0x4eu, 0x62u, 0xfbu, 0x4cu, 0x86u, 0xabu, 0x3cu, 0x87u, 0x09u, 0x2bu, 0xb5u, 0x16u, 0xafu, 0x6bu, 0x9bu, 0xbau, 0xefu, 0x67u, 0x40u, 0x2cu, 0xcbu, 0x8bu },
	std::array<qpl::u8, 256> { 0x4au, 0x02u, 0x33u, 0x54u, 0x59u, 0x26u, 0xefu, 0x57u, 0xeeu, 0x4cu, 0x91u, 0x3fu, 0x3eu, 0x2au, 0xebu, 0x8eu, 0xddu, 0x48u, 0xacu, 0x3cu, 0x88u, 0x9du, 0xa6u, 0xa4u, 0x05u, 0xbeu, 0x7au, 0xc9u, 0x84u, 0xf7u, 0x46u, 0x4eu, 0x51u, 0x89u, 0xe8u, 0x31u, 0x4fu, 0x0cu, 0x32u, 0xa3u, 0x0du, 0x87u, 0x07u, 0x72u, 0x5fu, 0x8au, 0xf0u, 0xc3u, 0xb6u, 0x00u, 0x41u, 0x93u, 0xb5u, 0x09u, 0x6au, 0xfau, 0x2du, 0x2fu, 0x52u, 0x53u, 0xcbu, 0x16u, 0xdau, 0xc4u, 0x24u, 0x6fu, 0xf9u, 0x8bu, 0xdfu, 0xffu, 0x2cu, 0x94u, 0x80u, 0xeau, 0xfbu, 0x1au, 0xe5u, 0x1du, 0xf4u, 0xecu, 0x1fu, 0x0eu, 0x20u, 0x29u, 0x39u, 0x67u, 0xf8u, 0x40u, 0xc6u, 0xf6u, 0x12u, 0x28u, 0x7cu, 0x62u, 0x01u, 0x0bu, 0x92u, 0x6bu, 0x65u, 0xc0u, 0x47u, 0x64u, 0xedu, 0x37u, 0x11u, 0x25u, 0xfcu, 0x9eu, 0x04u, 0xfeu, 0xd4u, 0x42u, 0xc8u, 0x21u, 0x9cu, 0x95u, 0xe7u, 0xb1u, 0xb8u, 0xbfu, 0xe9u, 0x55u, 0x6cu, 0xd8u, 0x82u, 0x43u, 0xf2u, 0x85u, 0x35u, 0x03u, 0xd0u, 0x98u, 0x83u, 0x77u, 0xaau, 0xe1u, 0xc5u, 0x9bu, 0x8du, 0x38u, 0xd9u, 0x7fu, 0xafu, 0xd7u, 0x7bu, 0x5au, 0xc2u, 0x6eu, 0x71u, 0xceu, 0x10u, 0x60u, 0xf5u, 0x63u, 0x1cu, 0xa8u, 0x3bu, 0x68u, 0x90u, 0x66u, 0x81u, 0x96u, 0x76u, 0xaeu, 0x74u, 0xcau, 0x08u, 0x3du, 0x7du, 0xbau, 0x69u, 0xa5u, 0xa0u, 0x9fu, 0x6du, 0x0fu, 0x99u, 0x27u, 0x19u, 0x56u, 0x2eu, 0x44u, 0xd6u, 0x17u, 0x79u, 0x49u, 0x30u, 0x58u, 0xb3u, 0x8cu, 0xa7u, 0x75u, 0x22u, 0x8fu, 0xdbu, 0xcfu, 0xfdu, 0x5bu, 0x1bu, 0xd2u, 0x23u, 0x50u, 0xe2u, 0x78u, 0x73u, 0xbcu, 0x18u, 0x15u, 0xb9u, 0xe6u, 0xdcu, 0x3au, 0x45u, 0xbdu, 0x9au, 0x7eu, 0x70u, 0x5cu, 0xf3u, 0x13u, 0x36u, 0xd1u, 0xb4u, 0x06u, 0x5du, 0x1eu, 0xd5u, 0xc7u, 0xa2u, 0xdeu, 0xadu, 0x86u, 0x61u, 0x5eu, 0x0au, 0x34u, 0xabu, 0xe4u, 0xccu, 0xe3u, 0xf1u, 0xe0u, 0x4du, 0x4bu, 0xcdu, 0xa1u, 0x2bu, 0xa9u, 0x97u, 0xb0u, 0xbbu, 0xd3u, 0x14u, 0xc1u, 0xb7u, 0xb2u },
	std::array<qpl::u8, 256> { 0x89u, 0x00u, 0x78u, 0xdeu, 0x41u, 0x3au, 0xf7u, 0xbau, 0x7eu, 0xe5u, 0xf4u, 0xa5u, 0xcbu, 0xdfu, 0x66u, 0xeeu, 0x18u, 0xa3u, 0x61u, 0xd7u, 0x50u, 0x40u, 0xc5u, 0x02u, 0x44u, 0x93u, 0xb1u, 0xefu, 0xc9u, 0x7cu, 0x4du, 0x88u, 0x1bu, 0x92u, 0x17u, 0x9fu, 0x82u, 0x4au, 0xc4u, 0xa9u, 0x11u, 0x1fu, 0x39u, 0x99u, 0x2du, 0xb3u, 0x91u, 0x3fu, 0x83u, 0x0du, 0xfcu, 0x8du, 0x95u, 0xf6u, 0x6cu, 0x28u, 0xedu, 0x9cu, 0x1eu, 0x75u, 0x21u, 0x8fu, 0xf2u, 0x8eu, 0xeau, 0xf0u, 0xe8u, 0x60u, 0x15u, 0x03u, 0x71u, 0x3cu, 0x12u, 0x25u, 0x06u, 0x0au, 0x43u, 0xe0u, 0x54u, 0x3eu, 0x56u, 0x16u, 0xa1u, 0x6bu, 0xccu, 0xacu, 0x9eu, 0xb5u, 0xc1u, 0xc7u, 0x84u, 0x34u, 0x1du, 0xb8u, 0xebu, 0x62u, 0x2fu, 0xddu, 0x7fu, 0x72u, 0x69u, 0xfeu, 0x5au, 0x80u, 0xfbu, 0x0fu, 0xd0u, 0x20u, 0xa6u, 0xabu, 0x33u, 0x6au, 0xfdu, 0x27u, 0xe1u, 0x1au, 0x05u, 0x9du, 0x97u, 0x09u, 0x47u, 0x8au, 0x87u, 0xaau, 0xc0u, 0x36u, 0x96u, 0xaeu, 0xa7u, 0x7bu, 0x1cu, 0xbfu, 0x29u, 0x5fu, 0x73u, 0xb7u, 0xecu, 0x8bu, 0x6eu, 0x13u, 0x9bu, 0xcfu, 0x68u, 0x9au, 0x7du, 0x08u, 0x77u, 0xa8u, 0x23u, 0x90u, 0xe3u, 0x10u, 0xceu, 0xdau, 0x6fu, 0xbcu, 0xd4u, 0x53u, 0xf3u, 0xbbu, 0x32u, 0x98u, 0x46u, 0x2eu, 0x07u, 0xb4u, 0x5bu, 0xbdu, 0x55u, 0x2au, 0x59u, 0xd8u, 0x45u, 0xf5u, 0xb2u, 0x74u, 0xe7u, 0x63u, 0x42u, 0x70u, 0xadu, 0xe2u, 0x64u, 0x35u, 0x48u, 0xe6u, 0xe4u, 0x24u, 0x6du, 0x76u, 0xa4u, 0xd6u, 0x8cu, 0xb6u, 0xf8u, 0xd5u, 0x26u, 0x0cu, 0x65u, 0x3du, 0x22u, 0xc8u, 0x67u, 0x57u, 0x5du, 0xa2u, 0x30u, 0x4fu, 0x0bu, 0x85u, 0xfau, 0x79u, 0x5cu, 0xafu, 0x04u, 0x01u, 0xdbu, 0xdcu, 0xd9u, 0x4bu, 0xbeu, 0xd1u, 0xcau, 0x2cu, 0x49u, 0x2bu, 0x38u, 0x58u, 0x86u, 0x4eu, 0xc3u, 0xb0u, 0x37u, 0xd2u, 0xcdu, 0x19u, 0x52u, 0x5eu, 0x14u, 0x0eu, 0xd3u, 0x7au, 0x4cu, 0x3bu, 0xf1u, 0x81u, 0xe9u, 0xa0u, 0xf9u, 0x51u, 0xc2u, 0xb9u, 0x31u, 0xffu, 0x94u, 0xc6u },
	std::array<qpl::u8, 256> { 0x60u, 0x2du, 0xacu, 0xe7u, 0x25u, 0xa4u, 0x10u, 0x01u, 0x8bu, 0x6au, 0x11u, 0x0cu, 0xecu, 0x94u, 0x7du, 0x8cu, 0xbfu, 0x06u, 0x53u, 0xd1u, 0xcau, 0x8eu, 0x9eu, 0x99u, 0xcfu, 0xc0u, 0x44u, 0xd5u, 0xa5u, 0x0du, 0x09u, 0xf2u, 0x2fu, 0x23u, 0x7cu, 0xaau, 0xe3u, 0x82u, 0xf7u, 0xd3u, 0xb3u, 0x76u, 0x38u, 0x58u, 0x9cu, 0x4au, 0xdcu, 0x1cu, 0xb4u, 0xedu, 0xb0u, 0xdbu, 0x9du, 0xe6u, 0x37u, 0xc3u, 0xf0u, 0x92u, 0x36u, 0x6cu, 0xd2u, 0x05u, 0xeau, 0x34u, 0xd4u, 0x96u, 0x85u, 0xb2u, 0x49u, 0xa6u, 0xceu, 0x6bu, 0x51u, 0xbdu, 0xa1u, 0x31u, 0x39u, 0x42u, 0x72u, 0x70u, 0x27u, 0xabu, 0xe0u, 0x29u, 0xd9u, 0x0au, 0x3du, 0x80u, 0xa7u, 0x62u, 0x2bu, 0x17u, 0x14u, 0xdau, 0x1fu, 0xf1u, 0x7bu, 0x3au, 0x33u, 0xc1u, 0x5bu, 0x18u, 0xe4u, 0xc9u, 0x97u, 0x5eu, 0x30u, 0x3fu, 0xf6u, 0x6eu, 0xf4u, 0x87u, 0xdeu, 0xffu, 0xafu, 0xb8u, 0x46u, 0x2eu, 0xa9u, 0xd6u, 0xeeu, 0x5du, 0x86u, 0x0eu, 0x45u, 0xbbu, 0x90u, 0x7au, 0xb7u, 0x32u, 0x91u, 0x65u, 0x57u, 0x47u, 0x5fu, 0x75u, 0xf8u, 0xe1u, 0x55u, 0x88u, 0xa3u, 0xa0u, 0x1eu, 0xe9u, 0xc4u, 0x3eu, 0x71u, 0xadu, 0x8fu, 0x20u, 0x74u, 0x19u, 0x4bu, 0x4eu, 0x68u, 0x43u, 0x08u, 0xfdu, 0xefu, 0x35u, 0x0bu, 0x03u, 0x69u, 0x02u, 0x04u, 0xb1u, 0x66u, 0x3bu, 0x7eu, 0x0fu, 0x9au, 0xbau, 0x52u, 0x54u, 0x95u, 0x4fu, 0x4cu, 0x81u, 0x12u, 0xd0u, 0x15u, 0x7fu, 0x4du, 0xebu, 0x1du, 0xf9u, 0xb6u, 0x56u, 0xcbu, 0x6fu, 0x8du, 0xfbu, 0x28u, 0xbeu, 0xb5u, 0x2au, 0xccu, 0xa8u, 0xddu, 0xb9u, 0xbcu, 0xcdu, 0x78u, 0x1bu, 0x73u, 0xfcu, 0x5au, 0xfau, 0xf5u, 0x3cu, 0x6du, 0x77u, 0xe2u, 0xf3u, 0x83u, 0x93u, 0xaeu, 0x8au, 0x21u, 0x67u, 0x98u, 0x64u, 0xc8u, 0x48u, 0x40u, 0xfeu, 0xd8u, 0xe8u, 0xe5u, 0x61u, 0x9bu, 0x16u, 0x50u, 0xc2u, 0xc5u, 0x89u, 0x9fu, 0x26u, 0x59u, 0x79u, 0xc7u, 0x00u, 0x2cu, 0x84u, 0x07u, 0xa2u, 0x22u, 0x24u, 0x13u, 0x1au, 0xc6u, 0xdfu, 0x63u, 0xd7u, 0x5cu, 0x41u },
	std::array<qpl::u8, 256> { 0x14u, 0xefu, 0xa2u, 0x9eu, 0x0au, 0x85u, 0x63u, 0x0fu, 0xbbu, 0x50u, 0x1eu, 0xabu, 0x07u, 0xfbu, 0x34u, 0x9au, 0x0cu, 0x89u, 0x72u, 0xb8u, 0x87u, 0x8cu, 0x47u, 0x6au, 0x81u, 0x56u, 0x5au, 0x5bu, 0xa6u, 0x91u, 0xafu, 0xdfu, 0x19u, 0x2eu, 0xfdu, 0x45u, 0xf4u, 0xf3u, 0x5eu, 0x92u, 0xa4u, 0xcdu, 0xadu, 0xc1u, 0x68u, 0x43u, 0x1au, 0x98u, 0x3du, 0x8eu, 0x4cu, 0x25u, 0x22u, 0x49u, 0xe2u, 0xf8u, 0x8bu, 0x74u, 0xbdu, 0x4fu, 0xceu, 0x37u, 0xf6u, 0x44u, 0x31u, 0xe0u, 0x73u, 0x9bu, 0x28u, 0x5cu, 0x64u, 0x54u, 0xe8u, 0x0du, 0xebu, 0xdeu, 0x6cu, 0x40u, 0x42u, 0x7du, 0x77u, 0x8au, 0xc7u, 0x3fu, 0xb3u, 0xbcu, 0x13u, 0xd2u, 0x09u, 0x8du, 0x11u, 0x94u, 0xbfu, 0x53u, 0x18u, 0x82u, 0x32u, 0xb7u, 0x20u, 0xd4u, 0x1fu, 0x12u, 0x3au, 0x95u, 0x08u, 0x2du, 0xcfu, 0xbau, 0x80u, 0xedu, 0x41u, 0x61u, 0xd1u, 0xc5u, 0x24u, 0xccu, 0xd6u, 0xc9u, 0x1bu, 0x66u, 0xf7u, 0xf1u, 0xc2u, 0xd0u, 0x9cu, 0x5du, 0x93u, 0xe9u, 0x59u, 0xf5u, 0x2fu, 0x4du, 0xddu, 0x36u, 0x79u, 0xfeu, 0xe3u, 0xdbu, 0x00u, 0xb2u, 0xc8u, 0x99u, 0x30u, 0x60u, 0xd7u, 0x71u, 0xfau, 0xaau, 0x7au, 0x2au, 0x26u, 0xc0u, 0x4bu, 0xa7u, 0x97u, 0x84u, 0x7cu, 0xfcu, 0x83u, 0xecu, 0x78u, 0x6eu, 0xe1u, 0x23u, 0xe4u, 0x02u, 0xd3u, 0x7bu, 0x0bu, 0x62u, 0xacu, 0x6du, 0x57u, 0xffu, 0x51u, 0xcbu, 0x67u, 0xbeu, 0xc3u, 0x3bu, 0x16u, 0x90u, 0x6fu, 0x70u, 0x9fu, 0xd8u, 0x29u, 0xb0u, 0xb1u, 0x75u, 0x48u, 0xa9u, 0xd9u, 0x1cu, 0xb6u, 0x05u, 0xe6u, 0x9du, 0xf2u, 0xb5u, 0x3eu, 0x01u, 0x58u, 0x4eu, 0xb4u, 0x4au, 0x15u, 0xdcu, 0xe5u, 0xa3u, 0x69u, 0x46u, 0x03u, 0x17u, 0xa8u, 0x3cu, 0x86u, 0x04u, 0x39u, 0x52u, 0x1du, 0x33u, 0xb9u, 0x7fu, 0x0eu, 0xdau, 0x6bu, 0x96u, 0xa0u, 0xf9u, 0xeau, 0x55u, 0xd5u, 0x21u, 0xa1u, 0x65u, 0x5fu, 0x10u, 0x2bu, 0x8fu, 0x76u, 0xeeu, 0x88u, 0xa5u, 0x2cu, 0x7eu, 0xcau, 0xaeu, 0xf0u, 0x27u, 0x38u, 0x06u, 0xe7u, 0xc4u, 0xc6u, 0x35u },
	std::array<qpl::u8, 256> { 0x30u, 0x67u, 0x25u, 0xf9u, 0x9du, 0x4fu, 0xc4u, 0xe7u, 0xb3u, 0x82u, 0xceu, 0xafu, 0xf8u, 0x54u, 0x7fu, 0xc2u, 0x8cu, 0x7au, 0xacu, 0x29u, 0xa0u, 0x6fu, 0x91u, 0x63u, 0xc5u, 0xd6u, 0x4cu, 0x2cu, 0x4du, 0xaau, 0x7eu, 0xe9u, 0xb7u, 0x2eu, 0xd9u, 0x53u, 0x06u, 0x32u, 0xffu, 0xc1u, 0x57u, 0xa4u, 0x1bu, 0x01u, 0x8au, 0x83u, 0xc3u, 0x61u, 0xfbu, 0x1fu, 0xd7u, 0xfeu, 0xb0u, 0x49u, 0x78u, 0x3au, 0x2bu, 0xc8u, 0x64u, 0xb8u, 0xf6u, 0xf0u, 0x0du, 0x7cu, 0xb5u, 0x24u, 0x43u, 0xcau, 0xe6u, 0x7bu, 0x86u, 0xadu, 0xbeu, 0x42u, 0xa9u, 0xe4u, 0xc0u, 0xdbu, 0x37u, 0x00u, 0xf3u, 0x81u, 0x87u, 0x03u, 0x76u, 0x11u, 0x73u, 0x9bu, 0xc6u, 0x68u, 0x6bu, 0x48u, 0x1cu, 0x79u, 0x56u, 0xabu, 0x58u, 0x38u, 0xf2u, 0x74u, 0x9au, 0xecu, 0x07u, 0x3fu, 0xd1u, 0x75u, 0x99u, 0x6eu, 0x72u, 0x46u, 0x3du, 0xcbu, 0xaeu, 0xbau, 0x02u, 0x5bu, 0x71u, 0x05u, 0xebu, 0x15u, 0x2fu, 0x51u, 0x84u, 0xa5u, 0xeeu, 0xbdu, 0x3eu, 0xa7u, 0x08u, 0xd3u, 0x69u, 0x94u, 0x92u, 0x31u, 0xfdu, 0x89u, 0xf7u, 0x80u, 0xe8u, 0xa8u, 0x62u, 0x66u, 0xdfu, 0x20u, 0xeau, 0xcfu, 0x0cu, 0x90u, 0x16u, 0x19u, 0x10u, 0xa1u, 0x65u, 0x5eu, 0x35u, 0xe2u, 0x98u, 0x60u, 0x8du, 0x26u, 0x0eu, 0xe1u, 0x5cu, 0x5du, 0x2du, 0x45u, 0x4eu, 0x7du, 0x5au, 0x13u, 0xcdu, 0xb2u, 0x5fu, 0x88u, 0xa3u, 0xa6u, 0x9cu, 0x1au, 0xbfu, 0xa2u, 0xf5u, 0x77u, 0xbcu, 0xb1u, 0xb4u, 0x34u, 0x6cu, 0x33u, 0x28u, 0xbbu, 0x6au, 0x52u, 0xd5u, 0x0bu, 0xd4u, 0x9eu, 0xddu, 0x12u, 0xefu, 0x1du, 0x41u, 0xd0u, 0xd8u, 0x97u, 0xb6u, 0x3cu, 0xc9u, 0x40u, 0xc7u, 0x8eu, 0x95u, 0x21u, 0xf1u, 0x2au, 0x93u, 0x3bu, 0xd2u, 0xdeu, 0xfau, 0x70u, 0x17u, 0xdcu, 0xccu, 0x0fu, 0x96u, 0x36u, 0x8bu, 0x04u, 0xf4u, 0x39u, 0x59u, 0x47u, 0xe0u, 0x4au, 0x18u, 0x4bu, 0x9fu, 0xdau, 0xe5u, 0xfcu, 0x55u, 0x23u, 0xedu, 0x8fu, 0xb9u, 0x1eu, 0x14u, 0x09u, 0x85u, 0x44u, 0xe3u, 0x6du, 0x22u, 0x50u, 0x27u, 0x0au },
	std::array<qpl::u8, 256> { 0xb5u, 0x52u, 0x0au, 0xa3u, 0xd2u, 0x76u, 0xabu, 0xb9u, 0xe8u, 0x3du, 0x12u, 0xc4u, 0x4bu, 0x9du, 0xadu, 0xb8u, 0xa9u, 0xafu, 0xccu, 0x0eu, 0x6au, 0x0fu, 0xdeu, 0x40u, 0xecu, 0xc7u, 0xedu, 0x5du, 0x86u, 0x30u, 0xd9u, 0xdfu, 0xe1u, 0xc9u, 0xb3u, 0x54u, 0x93u, 0x06u, 0x70u, 0xbau, 0x2eu, 0x69u, 0x02u, 0xfau, 0x2du, 0x7fu, 0xf9u, 0x0bu, 0x27u, 0x85u, 0x90u, 0x2bu, 0x17u, 0x41u, 0xbdu, 0x64u, 0x33u, 0x56u, 0x47u, 0x92u, 0x3fu, 0x77u, 0x32u, 0xaeu, 0x0cu, 0x91u, 0xacu, 0xb0u, 0x48u, 0x4au, 0x45u, 0xfdu, 0xeeu, 0x78u, 0x7bu, 0x67u, 0xcbu, 0x65u, 0x6fu, 0x88u, 0xeau, 0xd8u, 0x36u, 0x3au, 0x5fu, 0xc0u, 0x08u, 0x7du, 0xe7u, 0x4du, 0xb7u, 0x79u, 0x9fu, 0x1eu, 0x8au, 0xe9u, 0x31u, 0x84u, 0xdcu, 0xd1u, 0xc3u, 0x2fu, 0xc2u, 0x81u, 0xe0u, 0x58u, 0x25u, 0x18u, 0x62u, 0x01u, 0x66u, 0x94u, 0x71u, 0x59u, 0x7cu, 0x21u, 0x75u, 0x5au, 0x11u, 0x63u, 0x6cu, 0x9au, 0xfeu, 0x97u, 0x07u, 0x09u, 0x38u, 0x3bu, 0xe3u, 0x57u, 0xf6u, 0x61u, 0x1fu, 0xdbu, 0xe5u, 0xbfu, 0x39u, 0x05u, 0x24u, 0x60u, 0x95u, 0xaau, 0xfcu, 0x8bu, 0x73u, 0xe4u, 0x49u, 0x20u, 0x87u, 0x6eu, 0x35u, 0x37u, 0x15u, 0x42u, 0xb1u, 0x04u, 0x1du, 0x98u, 0xd4u, 0xd6u, 0x46u, 0x53u, 0xa5u, 0xd3u, 0xc6u, 0x8fu, 0x7eu, 0xefu, 0x13u, 0x9bu, 0x7au, 0xf4u, 0x23u, 0xa8u, 0xebu, 0x1cu, 0xf1u, 0x89u, 0xa1u, 0xf3u, 0xa2u, 0xd5u, 0xbbu, 0xf0u, 0x74u, 0xddu, 0x43u, 0xf5u, 0xb6u, 0xfbu, 0x29u, 0x8eu, 0xc8u, 0x03u, 0xceu, 0xf2u, 0xe2u, 0xcdu, 0x19u, 0x4fu, 0x3eu, 0xb2u, 0x4cu, 0xdau, 0x51u, 0x6du, 0xd0u, 0xd7u, 0xcau, 0x72u, 0x99u, 0x00u, 0x0du, 0xa6u, 0x22u, 0x2au, 0x28u, 0x68u, 0xf7u, 0x34u, 0xbcu, 0x6bu, 0x83u, 0xc5u, 0xa7u, 0x1au, 0xa0u, 0xb4u, 0x4eu, 0x16u, 0x3cu, 0x8du, 0xf8u, 0x5cu, 0x2cu, 0xa4u, 0x9cu, 0x80u, 0xffu, 0x50u, 0x1bu, 0x96u, 0x5bu, 0x26u, 0x14u, 0xbeu, 0x55u, 0x82u, 0x44u, 0xcfu, 0x10u, 0x8cu, 0x5eu, 0x9eu, 0xc1u, 0xe6u },
	std::array<qpl::u8, 256> { 0xf0u, 0xccu, 0xd8u, 0xf7u, 0x27u, 0xf9u, 0x82u, 0x88u, 0xd1u, 0x6eu, 0x37u, 0xa8u, 0x48u, 0xc7u, 0x09u, 0x68u, 0x36u, 0x17u, 0xd3u, 0xd2u, 0xe0u, 0x7cu, 0xfdu, 0x32u, 0x2eu, 0x33u, 0x47u, 0xfeu, 0x5eu, 0x2au, 0x73u, 0x90u, 0xaau, 0x91u, 0x41u, 0xf1u, 0x58u, 0xbfu, 0xddu, 0xa7u, 0xecu, 0xf4u, 0xcdu, 0x99u, 0x43u, 0x61u, 0x84u, 0x1bu, 0xaeu, 0x7bu, 0x75u, 0x95u, 0x64u, 0xa4u, 0xa0u, 0x6cu, 0x34u, 0x2du, 0xbdu, 0x5cu, 0xb3u, 0x4bu, 0xe2u, 0xb4u, 0x86u, 0xf8u, 0x5du, 0xd6u, 0x9au, 0x98u, 0x0au, 0x6bu, 0x0bu, 0xb6u, 0x31u, 0x4au, 0xfbu, 0x52u, 0x26u, 0x5bu, 0x4fu, 0x28u, 0x8du, 0x96u, 0xc4u, 0xdcu, 0x08u, 0xe6u, 0x00u, 0x8au, 0x65u, 0xcbu, 0xdeu, 0x8bu, 0xf5u, 0xfcu, 0xb0u, 0x24u, 0xabu, 0x9eu, 0xa9u, 0xd4u, 0x72u, 0x77u, 0x74u, 0x7eu, 0x9bu, 0xe4u, 0xf6u, 0x15u, 0x0cu, 0x5fu, 0xbeu, 0x83u, 0x38u, 0x13u, 0x01u, 0x12u, 0x19u, 0x8eu, 0x23u, 0xdau, 0x21u, 0x85u, 0xc6u, 0xb9u, 0xd0u, 0x97u, 0xd7u, 0x3fu, 0x1fu, 0x04u, 0xe1u, 0x46u, 0xa6u, 0x89u, 0xf2u, 0xcau, 0x1cu, 0xebu, 0xf3u, 0x67u, 0x5au, 0x42u, 0xd5u, 0x39u, 0x03u, 0x4eu, 0x8cu, 0x81u, 0xc8u, 0xb2u, 0xdfu, 0x70u, 0x93u, 0xacu, 0x3au, 0x60u, 0x2bu, 0x9du, 0xc9u, 0x66u, 0xa5u, 0x18u, 0x2fu, 0xa1u, 0x6au, 0xceu, 0xedu, 0x40u, 0x51u, 0x0eu, 0xe3u, 0x11u, 0x3eu, 0x7au, 0xe9u, 0x1au, 0x71u, 0x78u, 0x07u, 0xefu, 0xa3u, 0x16u, 0x87u, 0x9fu, 0x80u, 0x76u, 0x1du, 0x35u, 0x50u, 0x25u, 0x3bu, 0x0fu, 0x02u, 0x29u, 0xadu, 0x6fu, 0xc3u, 0x53u, 0xe5u, 0x79u, 0x3cu, 0x69u, 0x9cu, 0xb5u, 0x59u, 0x06u, 0x54u, 0xdbu, 0xd9u, 0x30u, 0x44u, 0xbcu, 0x7fu, 0x55u, 0x92u, 0x45u, 0xc2u, 0x0du, 0x20u, 0x7du, 0x2cu, 0xc0u, 0xffu, 0x62u, 0xbau, 0x6du, 0xafu, 0x4cu, 0xc1u, 0x63u, 0xcfu, 0xeau, 0xb7u, 0x3du, 0x10u, 0xc5u, 0x56u, 0x22u, 0x1eu, 0xbbu, 0xb8u, 0x14u, 0xa2u, 0x4du, 0x57u, 0xeeu, 0xe8u, 0x05u, 0x94u, 0xe7u, 0xb1u, 0x8fu, 0x49u, 0xfau },
};

constexpr auto sbox_inverse = std::array{
	std::array<qpl::u8, 256> { 0x51u, 0xaau, 0xa8u, 0xa6u, 0xbdu, 0x59u, 0x1eu, 0x9du, 0x04u, 0x7eu, 0x95u, 0xecu, 0xf2u, 0x25u, 0x9bu, 0x6cu, 0x09u, 0x4fu, 0x0fu, 0x6au, 0xadu, 0x48u, 0x70u, 0x52u, 0x0bu, 0xe2u, 0x4du, 0x93u, 0x43u, 0xc6u, 0xf0u, 0xfeu, 0x32u, 0x16u, 0x28u, 0xfcu, 0x66u, 0x6bu, 0xa2u, 0x83u, 0x60u, 0xc7u, 0xd6u, 0xd8u, 0x69u, 0x37u, 0xf7u, 0x76u, 0x17u, 0xb8u, 0x3bu, 0xedu, 0x90u, 0x2fu, 0x44u, 0x30u, 0x4eu, 0x8bu, 0xe4u, 0xa9u, 0x58u, 0xaeu, 0xe1u, 0x82u, 0x5au, 0x06u, 0x2eu, 0x29u, 0x05u, 0x88u, 0x24u, 0x03u, 0xabu, 0xb1u, 0xf9u, 0xbfu, 0xb4u, 0x57u, 0xa0u, 0xe6u, 0x5bu, 0x8fu, 0xb2u, 0x1du, 0x0du, 0x10u, 0x2au, 0x01u, 0xdeu, 0x21u, 0xd4u, 0xe9u, 0x36u, 0x5cu, 0x65u, 0x78u, 0x39u, 0x07u, 0x00u, 0xc1u, 0xc4u, 0x71u, 0x89u, 0xd5u, 0x7cu, 0xf8u, 0xfau, 0xe5u, 0x12u, 0xd1u, 0x94u, 0xeeu, 0x75u, 0xe0u, 0x4cu, 0x6eu, 0x27u, 0x62u, 0x97u, 0xb3u, 0x08u, 0x1fu, 0x8eu, 0xddu, 0xdcu, 0x92u, 0xc8u, 0xc2u, 0xf5u, 0x3du, 0x72u, 0x2cu, 0xd9u, 0x5eu, 0x47u, 0xbcu, 0x85u, 0x7au, 0xefu, 0x20u, 0x55u, 0x3fu, 0x38u, 0xffu, 0x53u, 0x64u, 0x7du, 0x02u, 0x9au, 0xb9u, 0x54u, 0x80u, 0xdfu, 0xfbu, 0x45u, 0xcfu, 0x98u, 0x79u, 0x61u, 0xe3u, 0x0eu, 0x86u, 0xfdu, 0x7bu, 0x0cu, 0xf4u, 0xb0u, 0x56u, 0x9fu, 0xf6u, 0x5fu, 0x1au, 0xb5u, 0x96u, 0x1bu, 0xb6u, 0x0au, 0xe7u, 0x73u, 0x3cu, 0x40u, 0xbau, 0x13u, 0x5du, 0x81u, 0x34u, 0xf3u, 0x3au, 0x77u, 0xc5u, 0xd3u, 0x22u, 0x33u, 0x35u, 0x68u, 0xf1u, 0xa5u, 0xa7u, 0x15u, 0x6du, 0xd0u, 0xd2u, 0x84u, 0xc3u, 0x26u, 0xeau, 0xb7u, 0x50u, 0xcau, 0xbbu, 0x2du, 0x42u, 0xc0u, 0x1cu, 0xccu, 0xebu, 0x14u, 0xdbu, 0x8du, 0x7fu, 0x11u, 0x2bu, 0xa3u, 0x3eu, 0x99u, 0x46u, 0xa4u, 0xcdu, 0xcbu, 0x8cu, 0x23u, 0x49u, 0x9eu, 0x4au, 0x8au, 0x63u, 0x41u, 0xd7u, 0x18u, 0x4bu, 0x91u, 0xbeu, 0x67u, 0xceu, 0xe8u, 0xc9u, 0xacu, 0x9cu, 0xa1u, 0x6fu, 0x19u, 0x74u, 0x31u, 0x87u, 0xafu, 0xdau },
	std::array<qpl::u8, 256> { 0xcbu, 0x1cu, 0xb1u, 0x5eu, 0x95u, 0xe0u, 0x91u, 0xfdu, 0xadu, 0x03u, 0xffu, 0x88u, 0x3cu, 0x26u, 0x8eu, 0x3fu, 0x57u, 0x13u, 0x82u, 0x6eu, 0xfeu, 0xd8u, 0x94u, 0x2eu, 0x6cu, 0x72u, 0xa1u, 0xbau, 0x8fu, 0x90u, 0xc3u, 0xf3u, 0x28u, 0x51u, 0x5bu, 0xefu, 0xabu, 0xb4u, 0xc9u, 0xd9u, 0x01u, 0xa8u, 0xedu, 0xbcu, 0xaau, 0x77u, 0x15u, 0x73u, 0xa2u, 0x9cu, 0x4bu, 0x09u, 0xdcu, 0x1fu, 0xc0u, 0x36u, 0x52u, 0x4du, 0x47u, 0x21u, 0x9bu, 0xdau, 0x85u, 0xc4u, 0xbdu, 0x63u, 0xb7u, 0xa4u, 0xcdu, 0x43u, 0xd7u, 0x81u, 0xf2u, 0xeau, 0x5fu, 0xaeu, 0xe6u, 0xd3u, 0xd4u, 0x16u, 0x76u, 0x6fu, 0x8cu, 0x00u, 0xddu, 0x5cu, 0xd2u, 0xe3u, 0x3bu, 0x84u, 0x0eu, 0xecu, 0x41u, 0x37u, 0xe4u, 0x27u, 0x34u, 0x23u, 0x71u, 0x32u, 0x40u, 0x7au, 0x04u, 0xcau, 0xf6u, 0x50u, 0xd0u, 0xbeu, 0x45u, 0x0du, 0xc6u, 0xf7u, 0xe9u, 0xd5u, 0x38u, 0x55u, 0x0cu, 0x9eu, 0x56u, 0x9au, 0xfcu, 0x7du, 0x08u, 0xf4u, 0x53u, 0x59u, 0x35u, 0x30u, 0x0au, 0x4fu, 0x4cu, 0x4au, 0x3du, 0xdeu, 0x22u, 0x86u, 0x60u, 0x8du, 0xc2u, 0xc5u, 0x8bu, 0xbbu, 0xf1u, 0xa7u, 0xf0u, 0x61u, 0xb3u, 0xbfu, 0x54u, 0x17u, 0xb6u, 0x25u, 0xf9u, 0x1du, 0x1eu, 0xb8u, 0x1au, 0xc1u, 0x42u, 0x98u, 0xd1u, 0x69u, 0xcfu, 0x5au, 0x33u, 0x11u, 0xb5u, 0xb0u, 0x6bu, 0x10u, 0xa9u, 0x4eu, 0x66u, 0x2fu, 0x29u, 0x68u, 0xc8u, 0x3au, 0x64u, 0x2au, 0x1bu, 0x6du, 0x2cu, 0x8au, 0x80u, 0xe1u, 0x75u, 0x19u, 0xebu, 0x0fu, 0xceu, 0x5du, 0xafu, 0xf8u, 0x0bu, 0x83u, 0xdfu, 0x12u, 0x05u, 0x46u, 0xf5u, 0x93u, 0x92u, 0xd6u, 0x44u, 0x97u, 0x6au, 0x18u, 0xa3u, 0xfau, 0x24u, 0xdbu, 0x89u, 0x7cu, 0xeeu, 0xa6u, 0x2du, 0xe7u, 0xc7u, 0x06u, 0x9fu, 0xa5u, 0xacu, 0x78u, 0xb9u, 0x02u, 0x74u, 0xccu, 0x7eu, 0x70u, 0x07u, 0xe5u, 0x79u, 0x58u, 0xb2u, 0xe2u, 0xe8u, 0x96u, 0x7fu, 0x9du, 0x39u, 0x20u, 0xa0u, 0x67u, 0x31u, 0x14u, 0x62u, 0xfbu, 0x3eu, 0x7bu, 0x2bu, 0x48u, 0x87u, 0x49u, 0x99u, 0x65u },
	std::array<qpl::u8, 256> { 0x96u, 0x71u, 0x6fu, 0xe4u, 0x48u, 0x3cu, 0x03u, 0xd5u, 0x9du, 0x0du, 0xbcu, 0xafu, 0xf1u, 0x8du, 0x8eu, 0x1au, 0x28u, 0xa6u, 0xe8u, 0xc0u, 0xe6u, 0xb8u, 0x90u, 0x46u, 0xc1u, 0xb5u, 0x3du, 0x98u, 0xaeu, 0x58u, 0xdau, 0x26u, 0x07u, 0x7bu, 0x95u, 0x6au, 0x16u, 0x9cu, 0x1fu, 0xb6u, 0x79u, 0x05u, 0x44u, 0x17u, 0xadu, 0x99u, 0x65u, 0xb0u, 0xddu, 0x20u, 0xfdu, 0x45u, 0x68u, 0x0eu, 0x27u, 0x2du, 0x5bu, 0x10u, 0x19u, 0xabu, 0xecu, 0x1cu, 0x54u, 0xdbu, 0x5du, 0x94u, 0xf5u, 0xceu, 0x34u, 0x7du, 0x61u, 0xa0u, 0xc5u, 0x86u, 0x53u, 0x37u, 0xdfu, 0x67u, 0x21u, 0x5cu, 0x04u, 0x62u, 0xa9u, 0x77u, 0xc7u, 0x78u, 0xe7u, 0xf2u, 0x84u, 0xa4u, 0x1bu, 0xc6u, 0xbau, 0xf9u, 0x66u, 0x4eu, 0xc8u, 0xd7u, 0x22u, 0x57u, 0xcbu, 0x2eu, 0xeeu, 0x3eu, 0xeau, 0x92u, 0xa8u, 0x0bu, 0xedu, 0xaau, 0x35u, 0x8cu, 0x73u, 0xe0u, 0x08u, 0xe2u, 0x5eu, 0xb7u, 0xd3u, 0x59u, 0x6du, 0x70u, 0x51u, 0x24u, 0x75u, 0xe5u, 0x74u, 0xb3u, 0xe1u, 0x41u, 0xbfu, 0x7au, 0x4fu, 0xd2u, 0xd8u, 0xcdu, 0x91u, 0x0au, 0xffu, 0x2bu, 0x49u, 0xb4u, 0x5au, 0x2fu, 0xf0u, 0xfbu, 0x7fu, 0x69u, 0x6eu, 0x82u, 0x81u, 0xe9u, 0x55u, 0x2au, 0x88u, 0x3au, 0x3fu, 0x72u, 0x39u, 0x4au, 0x06u, 0xc3u, 0x6bu, 0x7eu, 0xd9u, 0x8fu, 0x38u, 0x31u, 0xa1u, 0x9bu, 0x9fu, 0xa2u, 0x60u, 0x36u, 0x7cu, 0x89u, 0x13u, 0xfcu, 0x50u, 0x42u, 0x93u, 0x83u, 0x52u, 0x18u, 0x64u, 0xebu, 0x97u, 0xf6u, 0x02u, 0xb2u, 0xe3u, 0xd0u, 0x0fu, 0xf3u, 0x76u, 0xd4u, 0x40u, 0x01u, 0xf4u, 0x9au, 0x12u, 0xacu, 0x4bu, 0x87u, 0x9eu, 0xa3u, 0x09u, 0xc9u, 0x15u, 0x2cu, 0x30u, 0xbeu, 0x32u, 0x4du, 0x25u, 0xfeu, 0x8bu, 0x1du, 0xa7u, 0xdcu, 0x00u, 0xd1u, 0xfau, 0xf7u, 0x33u, 0x11u, 0x85u, 0x3bu, 0x56u, 0xd6u, 0xc4u, 0xa5u, 0x4cu, 0xb9u, 0x5fu, 0x14u, 0xb1u, 0x8au, 0x63u, 0x1eu, 0x47u, 0x23u, 0xccu, 0xf8u, 0x43u, 0x6cu, 0xcfu, 0xc2u, 0xbbu, 0x0cu, 0x29u, 0x80u, 0xdeu, 0xcau, 0xefu, 0xbdu },
	std::array<qpl::u8, 256> { 0x13u, 0x19u, 0x3au, 0x6du, 0x38u, 0x9cu, 0x5au, 0x30u, 0x56u, 0x5bu, 0x14u, 0x4fu, 0xa6u, 0x59u, 0x37u, 0x0du, 0xa7u, 0x83u, 0x92u, 0xdcu, 0x9fu, 0x3bu, 0x8fu, 0x9eu, 0x1fu, 0x2au, 0x87u, 0xffu, 0xfdu, 0x67u, 0xefu, 0x6bu, 0x17u, 0x40u, 0x42u, 0x2eu, 0x34u, 0xb1u, 0x65u, 0x23u, 0x4eu, 0x68u, 0x5fu, 0x90u, 0x05u, 0xe6u, 0x79u, 0x22u, 0xccu, 0x5du, 0xcdu, 0x09u, 0x1eu, 0x66u, 0x89u, 0xafu, 0x24u, 0x74u, 0x2fu, 0x36u, 0xdeu, 0xd2u, 0x82u, 0xfbu, 0xfeu, 0xc8u, 0x35u, 0x8du, 0x7du, 0xe8u, 0x43u, 0x1au, 0x12u, 0x55u, 0xb3u, 0xe2u, 0xc6u, 0xd6u, 0x54u, 0x16u, 0x27u, 0x78u, 0xbdu, 0xa2u, 0x7bu, 0x93u, 0x3du, 0xdau, 0x94u, 0xb2u, 0xabu, 0x58u, 0xeeu, 0xf7u, 0x88u, 0xa0u, 0xe5u, 0xb6u, 0x61u, 0xd9u, 0x8eu, 0x20u, 0xc0u, 0xacu, 0x7fu, 0xebu, 0x69u, 0x71u, 0xfcu, 0x08u, 0x51u, 0x0eu, 0x7cu, 0x21u, 0xaau, 0x47u, 0x9bu, 0xeau, 0xc2u, 0xcbu, 0xe3u, 0xf6u, 0xa3u, 0xe7u, 0x60u, 0xb7u, 0x2bu, 0xe4u, 0x06u, 0x6au, 0x96u, 0xa1u, 0x46u, 0xe1u, 0x11u, 0x3eu, 0xf2u, 0x9du, 0x15u, 0xf0u, 0x7eu, 0xc5u, 0xbeu, 0xceu, 0x57u, 0xd3u, 0x62u, 0xf1u, 0xaeu, 0x18u, 0xf8u, 0x99u, 0x0cu, 0x33u, 0x53u, 0xc3u, 0x91u, 0x63u, 0xf4u, 0x81u, 0x3cu, 0xb4u, 0x5eu, 0xedu, 0x44u, 0x0au, 0xc1u, 0xd4u, 0x70u, 0x8cu, 0x2du, 0x9au, 0xa5u, 0x03u, 0xcfu, 0xa8u, 0xbau, 0x01u, 0xcau, 0x10u, 0x52u, 0x4au, 0xb8u, 0xa9u, 0x76u, 0x72u, 0xd1u, 0xd5u, 0x07u, 0x98u, 0xdbu, 0xd7u, 0x86u, 0x80u, 0x1bu, 0x5cu, 0x84u, 0x7au, 0xfau, 0x3fu, 0xbfu, 0x97u, 0x50u, 0x0fu, 0x6eu, 0x02u, 0xc4u, 0x1cu, 0xbcu, 0xf3u, 0x75u, 0x85u, 0xddu, 0x8au, 0xbbu, 0xa4u, 0xe0u, 0x0bu, 0xd8u, 0x28u, 0x45u, 0x26u, 0x64u, 0x31u, 0x39u, 0xb0u, 0xecu, 0x48u, 0x4bu, 0xc7u, 0x00u, 0x04u, 0xe9u, 0xadu, 0x41u, 0x25u, 0xd0u, 0x1du, 0x29u, 0x4cu, 0xb9u, 0x8bu, 0xb5u, 0x49u, 0x4du, 0xc9u, 0x73u, 0x32u, 0x95u, 0x6cu, 0xdfu, 0x6fu, 0xf5u, 0x2cu, 0x77u, 0xf9u },
	std::array<qpl::u8, 256> { 0x94u, 0xd0u, 0xe0u, 0x68u, 0x8eu, 0xb4u, 0xf8u, 0x20u, 0x3du, 0x42u, 0xadu, 0x19u, 0x23u, 0xceu, 0x64u, 0xcdu, 0x3bu, 0x95u, 0x07u, 0x9bu, 0x8au, 0xe7u, 0xb6u, 0x40u, 0x12u, 0xd7u, 0x9cu, 0x1du, 0x79u, 0xbbu, 0xc1u, 0xfau, 0x88u, 0x5eu, 0xedu, 0x1bu, 0xcfu, 0x4du, 0x04u, 0x3cu, 0x03u, 0x27u, 0xe2u, 0x3eu, 0xb8u, 0x52u, 0xe4u, 0x55u, 0x8du, 0x71u, 0x78u, 0xdfu, 0xa6u, 0x7du, 0x2du, 0x33u, 0xd1u, 0x56u, 0xaau, 0x4fu, 0x96u, 0x4au, 0xf1u, 0x6fu, 0xe1u, 0xfcu, 0x85u, 0xbeu, 0x7au, 0x31u, 0xe8u, 0xfdu, 0xe5u, 0x1au, 0xfbu, 0xc4u, 0x3fu, 0x63u, 0x8cu, 0x91u, 0x10u, 0x39u, 0x77u, 0xc8u, 0x28u, 0x51u, 0x0fu, 0x34u, 0x25u, 0xe9u, 0x09u, 0xdcu, 0x6cu, 0x83u, 0xc5u, 0x46u, 0xa8u, 0x1fu, 0xcbu, 0x65u, 0x30u, 0x37u, 0xc7u, 0x45u, 0x00u, 0x5fu, 0xbcu, 0x2cu, 0xb9u, 0xe3u, 0x24u, 0x84u, 0x48u, 0xd4u, 0xf4u, 0x6eu, 0x72u, 0xabu, 0x7cu, 0xffu, 0x54u, 0xb2u, 0xa2u, 0x57u, 0xf0u, 0x53u, 0x81u, 0xd9u, 0x0bu, 0x2fu, 0x35u, 0x69u, 0xb0u, 0x61u, 0xacu, 0xd2u, 0xa4u, 0xb1u, 0x5du, 0x0cu, 0x9fu, 0x9du, 0xd8u, 0xddu, 0x29u, 0xebu, 0x86u, 0x97u, 0x4cu, 0x44u, 0xa7u, 0xeau, 0x4eu, 0xfeu, 0x36u, 0x62u, 0x47u, 0x01u, 0x0eu, 0x21u, 0x7fu, 0xe6u, 0xefu, 0x06u, 0x66u, 0xbdu, 0x0au, 0x2au, 0x18u, 0x98u, 0xa3u, 0x43u, 0x8fu, 0x67u, 0x22u, 0x82u, 0xb5u, 0x16u, 0xa1u, 0x3au, 0xf6u, 0x9au, 0x58u, 0x2eu, 0x76u, 0x05u, 0x41u, 0x26u, 0xb7u, 0x0du, 0xbau, 0x87u, 0xdau, 0xeeu, 0xd6u, 0x7eu, 0x99u, 0xc6u, 0xb3u, 0x5bu, 0x75u, 0x93u, 0x90u, 0x6bu, 0xcau, 0xc9u, 0xc2u, 0x5cu, 0x89u, 0xd5u, 0x15u, 0x70u, 0xf5u, 0xf9u, 0xa5u, 0x73u, 0x74u, 0xa9u, 0x5au, 0x32u, 0xccu, 0x49u, 0x59u, 0xdeu, 0xdbu, 0xc0u, 0x14u, 0xa0u, 0x38u, 0x2bu, 0x80u, 0x11u, 0xf3u, 0x1eu, 0x08u, 0xf7u, 0x02u, 0x9eu, 0xbfu, 0xd3u, 0x92u, 0xaeu, 0x4bu, 0x17u, 0x50u, 0x7bu, 0x8bu, 0xecu, 0xc3u, 0x6du, 0x13u, 0x6au, 0x1cu, 0xafu, 0x60u, 0xf2u },
	std::array<qpl::u8, 256> { 0x12u, 0xd1u, 0x40u, 0xb9u, 0x36u, 0xb1u, 0x26u, 0x3fu, 0xb8u, 0xf8u, 0x95u, 0xd0u, 0x54u, 0xddu, 0xb0u, 0xd9u, 0xeau, 0x01u, 0x6bu, 0x2au, 0x90u, 0xa7u, 0x1fu, 0xe4u, 0x32u, 0x22u, 0xc1u, 0x5du, 0xf2u, 0x0eu, 0x83u, 0x41u, 0x76u, 0xdfu, 0x63u, 0x4bu, 0x49u, 0xaeu, 0xd3u, 0xe5u, 0xa1u, 0xccu, 0x19u, 0xdbu, 0x96u, 0xa2u, 0xa3u, 0x99u, 0xd6u, 0x5cu, 0xdeu, 0x0cu, 0xc2u, 0x02u, 0xc7u, 0xb5u, 0x9au, 0xcbu, 0xeeu, 0xd8u, 0x8bu, 0xecu, 0xedu, 0x56u, 0x88u, 0x8cu, 0x9cu, 0x67u, 0xd7u, 0x33u, 0xf1u, 0x31u, 0xc5u, 0xf5u, 0x51u, 0x48u, 0x94u, 0x80u, 0xbeu, 0x57u, 0xa6u, 0x1au, 0xc9u, 0x6du, 0x70u, 0x7du, 0x09u, 0x98u, 0x3au, 0x50u, 0x2eu, 0xcfu, 0x65u, 0xa4u, 0x3bu, 0xf4u, 0x62u, 0x43u, 0xefu, 0x8fu, 0xc6u, 0x4fu, 0x72u, 0x1du, 0x44u, 0x17u, 0x1bu, 0x74u, 0xbfu, 0x21u, 0xacu, 0x39u, 0x4du, 0x45u, 0x86u, 0x30u, 0x2fu, 0xc4u, 0x05u, 0x7cu, 0x77u, 0x1cu, 0x82u, 0x84u, 0x61u, 0xb4u, 0x5eu, 0x55u, 0x6eu, 0xafu, 0x7eu, 0x35u, 0x8au, 0x9eu, 0x75u, 0x4eu, 0x59u, 0x24u, 0x1eu, 0x6fu, 0xd2u, 0x3eu, 0x73u, 0x2cu, 0xffu, 0x3cu, 0x8eu, 0x38u, 0x91u, 0x25u, 0x85u, 0xd5u, 0x8du, 0xf9u, 0x52u, 0x79u, 0x5au, 0x11u, 0x18u, 0x3du, 0x68u, 0x23u, 0x15u, 0x4au, 0xcdu, 0xfau, 0x14u, 0xdcu, 0x93u, 0xc3u, 0x0au, 0xe0u, 0xa8u, 0xceu, 0x20u, 0x06u, 0x7bu, 0xcau, 0x13u, 0xc0u, 0x60u, 0x78u, 0xe9u, 0x37u, 0xe1u, 0xf3u, 0x9du, 0x4cu, 0x69u, 0x71u, 0x47u, 0xe2u, 0x08u, 0x97u, 0x16u, 0x42u, 0xc8u, 0x07u, 0x9fu, 0xa9u, 0x04u, 0x2du, 0xb3u, 0xe7u, 0x0du, 0xabu, 0x29u, 0x6au, 0x28u, 0xbdu, 0xbbu, 0x00u, 0x92u, 0xadu, 0x27u, 0x5bu, 0xa0u, 0x87u, 0x58u, 0xfdu, 0x0fu, 0xe6u, 0xebu, 0xbcu, 0xe3u, 0x7fu, 0xe8u, 0x64u, 0xd4u, 0x0bu, 0xdau, 0x2bu, 0xf0u, 0x7au, 0xfeu, 0xfbu, 0x03u, 0xf6u, 0xa5u, 0xbau, 0xf7u, 0xaau, 0x34u, 0x10u, 0x9bu, 0x6cu, 0xb7u, 0x81u, 0x5fu, 0xfcu, 0xb2u, 0x53u, 0x46u, 0x66u, 0x89u, 0xb6u },
	std::array<qpl::u8, 256> { 0x34u, 0x74u, 0x83u, 0x4fu, 0x6du, 0x57u, 0xefu, 0xecu, 0xc8u, 0xd7u, 0x92u, 0x6bu, 0xc2u, 0x43u, 0x0du, 0xdbu, 0x2du, 0x66u, 0xf1u, 0x3bu, 0xe0u, 0x0eu, 0x15u, 0xa7u, 0xf7u, 0x5fu, 0xfbu, 0x23u, 0x71u, 0xf0u, 0xf3u, 0xc0u, 0x0fu, 0x09u, 0x89u, 0x90u, 0x8au, 0x9fu, 0x54u, 0x4eu, 0xd5u, 0xb7u, 0x2eu, 0xa5u, 0x3du, 0x12u, 0x79u, 0x25u, 0x7bu, 0x5bu, 0xafu, 0x9au, 0xb8u, 0xc9u, 0x26u, 0x52u, 0x14u, 0x63u, 0xc7u, 0xdeu, 0xddu, 0x5du, 0xd0u, 0xfcu, 0xcbu, 0xd6u, 0x49u, 0x11u, 0x21u, 0xeau, 0xfeu, 0x19u, 0x45u, 0xf5u, 0xa9u, 0x18u, 0xceu, 0x1eu, 0x35u, 0x1du, 0x03u, 0x93u, 0xe3u, 0x17u, 0xadu, 0xa2u, 0x80u, 0x28u, 0xeeu, 0x32u, 0xb1u, 0x06u, 0x88u, 0x07u, 0xabu, 0x8fu, 0x13u, 0xaeu, 0x31u, 0x62u, 0x70u, 0xe1u, 0xccu, 0x6cu, 0xe4u, 0xcfu, 0x8eu, 0x36u, 0x0bu, 0xbau, 0xf2u, 0x04u, 0xc5u, 0x50u, 0x29u, 0x40u, 0x6eu, 0x2au, 0x85u, 0x4au, 0x59u, 0xf4u, 0x78u, 0x61u, 0x72u, 0xa1u, 0x67u, 0x8cu, 0x5eu, 0xa4u, 0x84u, 0x38u, 0xe9u, 0x3cu, 0x37u, 0x82u, 0xc3u, 0x42u, 0x8bu, 0x44u, 0xdcu, 0x1bu, 0xd3u, 0x5au, 0xe6u, 0xd2u, 0x0au, 0xb5u, 0xacu, 0xb3u, 0x95u, 0x7au, 0x47u, 0x68u, 0x9cu, 0x75u, 0xbeu, 0xbfu, 0xc4u, 0xe8u, 0x64u, 0x6au, 0x9du, 0x08u, 0x41u, 0x24u, 0xd8u, 0x7fu, 0x48u, 0x7du, 0x87u, 0xd9u, 0xf9u, 0xb4u, 0x27u, 0xcdu, 0x39u, 0x8du, 0x00u, 0x16u, 0x7eu, 0xbbu, 0xbcu, 0x30u, 0xb6u, 0x05u, 0xb9u, 0x53u, 0xd4u, 0x65u, 0xa6u, 0x4cu, 0x76u, 0x86u, 0x2cu, 0x10u, 0xb2u, 0x1cu, 0x99u, 0x1au, 0x46u, 0x97u, 0x2fu, 0xe5u, 0xdfu, 0x60u, 0x2bu, 0x81u, 0x01u, 0x4du, 0xe7u, 0x9bu, 0xb0u, 0x20u, 0xd1u, 0xbdu, 0xe2u, 0x56u, 0xa8u, 0x73u, 0x02u, 0xcau, 0xa3u, 0xffu, 0x91u, 0x3eu, 0x58u, 0x3au, 0x33u, 0x4bu, 0x69u, 0x51u, 0x7cu, 0x3fu, 0xf8u, 0x5cu, 0x98u, 0xdau, 0xc6u, 0xedu, 0xaau, 0x22u, 0x9eu, 0xa0u, 0x1fu, 0x96u, 0x55u, 0xebu, 0xfau, 0xfdu, 0xc1u, 0x94u, 0xf6u, 0x0cu, 0x6fu, 0x77u },
	std::array<qpl::u8, 256> { 0xc4u, 0x3cu, 0xafu, 0xb2u, 0x3du, 0x1fu, 0x25u, 0x22u, 0x36u, 0x6fu, 0x56u, 0x3eu, 0x67u, 0x87u, 0x2eu, 0xf1u, 0x9eu, 0xabu, 0xbfu, 0xcfu, 0xd0u, 0xffu, 0xf2u, 0x60u, 0x03u, 0x43u, 0x57u, 0xfau, 0x94u, 0x9au, 0x5fu, 0x01u, 0x95u, 0x1bu, 0x37u, 0xa3u, 0x68u, 0xa2u, 0x78u, 0x5du, 0x81u, 0xa6u, 0xb7u, 0x8cu, 0x52u, 0x5eu, 0xe9u, 0xcdu, 0x08u, 0x35u, 0x0au, 0xa9u, 0xb1u, 0xe6u, 0x33u, 0xdeu, 0x21u, 0xd6u, 0x75u, 0x2du, 0xf9u, 0x26u, 0xe8u, 0x1eu, 0x77u, 0x07u, 0x39u, 0x62u, 0x1cu, 0x27u, 0xf4u, 0xa4u, 0xd5u, 0xc3u, 0xd7u, 0x54u, 0xeau, 0x12u, 0x06u, 0x23u, 0xf5u, 0x28u, 0x8fu, 0x88u, 0x85u, 0xbbu, 0xaau, 0x2au, 0x5cu, 0xc2u, 0x3bu, 0xa8u, 0x45u, 0x20u, 0x4cu, 0xfdu, 0x9fu, 0xd2u, 0x2cu, 0x8du, 0x79u, 0x6eu, 0xeeu, 0x34u, 0x13u, 0x8bu, 0xa1u, 0xa0u, 0xc1u, 0x99u, 0x47u, 0xccu, 0xd8u, 0xc8u, 0x44u, 0x70u, 0xcbu, 0xcau, 0xdfu, 0x00u, 0x05u, 0x4du, 0x8au, 0x5au, 0xb6u, 0x9cu, 0xf0u, 0x4eu, 0x59u, 0x97u, 0x76u, 0x98u, 0xceu, 0xc5u, 0x83u, 0x09u, 0xdbu, 0xd1u, 0xc7u, 0x14u, 0x48u, 0xb5u, 0x3fu, 0x61u, 0xfeu, 0x04u, 0xe4u, 0x19u, 0x93u, 0xc0u, 0x7du, 0x55u, 0xc9u, 0x2fu, 0x74u, 0x71u, 0x46u, 0xaeu, 0x9bu, 0x92u, 0xacu, 0xadu, 0xefu, 0x10u, 0x2bu, 0xebu, 0x6cu, 0x7bu, 0x29u, 0xd4u, 0x41u, 0x69u, 0xb8u, 0xe0u, 0x5bu, 0xa5u, 0x4fu, 0xb0u, 0xb9u, 0xe5u, 0xdcu, 0x16u, 0x96u, 0x24u, 0x84u, 0x9du, 0x6au, 0x6bu, 0x86u, 0xb3u, 0xdau, 0xedu, 0x17u, 0x31u, 0x0cu, 0x0du, 0x42u, 0xe3u, 0xb4u, 0x58u, 0x38u, 0xf6u, 0xfbu, 0xa7u, 0x30u, 0x64u, 0x66u, 0x80u, 0x91u, 0x49u, 0x65u, 0xe2u, 0x7cu, 0x32u, 0x11u, 0xbdu, 0x18u, 0x73u, 0xc6u, 0x4au, 0x1au, 0x4bu, 0x8eu, 0xfcu, 0x7eu, 0x1du, 0xddu, 0x72u, 0x89u, 0x02u, 0x90u, 0xe1u, 0x82u, 0xf3u, 0xecu, 0xbcu, 0x0bu, 0x53u, 0x6du, 0x3au, 0x40u, 0x50u, 0x7fu, 0x15u, 0x7au, 0xf8u, 0xe7u, 0x63u, 0xf7u, 0xbau, 0xbeu, 0xd9u, 0x51u, 0xd3u, 0x0fu, 0x0eu },
	std::array<qpl::u8, 256> { 0xb3u, 0x87u, 0x7eu, 0x5cu, 0xe7u, 0xb7u, 0x0bu, 0x94u, 0x47u, 0xf2u, 0x6bu, 0x46u, 0xe5u, 0x63u, 0xa3u, 0x93u, 0x25u, 0x4au, 0x5au, 0x64u, 0x76u, 0xa4u, 0xf5u, 0x71u, 0xd6u, 0x4bu, 0x74u, 0xc6u, 0x8eu, 0x5fu, 0x82u, 0x68u, 0xd2u, 0x60u, 0x79u, 0xe9u, 0x7bu, 0x40u, 0x9fu, 0x75u, 0xbcu, 0x55u, 0xc3u, 0xf3u, 0xfdu, 0x00u, 0x5du, 0x36u, 0x22u, 0x20u, 0x09u, 0xcdu, 0x51u, 0x17u, 0x2bu, 0x19u, 0x29u, 0xbbu, 0x62u, 0xa7u, 0xf0u, 0x8fu, 0xa5u, 0xb8u, 0xfcu, 0x73u, 0x85u, 0x24u, 0xe3u, 0xdeu, 0x2au, 0x30u, 0x7fu, 0x3du, 0x14u, 0xa1u, 0xedu, 0x0fu, 0xeau, 0x78u, 0x5bu, 0x45u, 0xe6u, 0x1fu, 0x8bu, 0x0cu, 0xd9u, 0xe4u, 0xabu, 0x13u, 0x3fu, 0x7au, 0x67u, 0x1cu, 0x37u, 0x6au, 0xb2u, 0x81u, 0xebu, 0xb1u, 0x2fu, 0x04u, 0x18u, 0xfbu, 0x4eu, 0x02u, 0x97u, 0xf7u, 0xaau, 0xbfu, 0x9bu, 0x31u, 0xddu, 0x86u, 0x26u, 0x06u, 0xd4u, 0xb9u, 0xdfu, 0xadu, 0x59u, 0x9cu, 0x35u, 0x61u, 0x53u, 0x28u, 0xd7u, 0x11u, 0x92u, 0x38u, 0x4fu, 0x9du, 0x70u, 0xc1u, 0xeeu, 0xf1u, 0x3au, 0x3cu, 0x33u, 0xffu, 0xa8u, 0xceu, 0x72u, 0x52u, 0x48u, 0xd5u, 0x4cu, 0x7cu, 0x21u, 0xb0u, 0xc8u, 0xe8u, 0xe2u, 0xacu, 0x65u, 0xf8u, 0xd3u, 0x16u, 0xdbu, 0x69u, 0x58u, 0x1bu, 0x0au, 0x07u, 0x90u, 0xa2u, 0xc4u, 0x34u, 0x57u, 0x4du, 0x6du, 0xefu, 0x9au, 0x6eu, 0xdau, 0xf6u, 0x96u, 0x56u, 0x3eu, 0x5eu, 0xd0u, 0xf4u, 0xa0u, 0x23u, 0x32u, 0x2cu, 0xf9u, 0x12u, 0xaeu, 0x0eu, 0x03u, 0x99u, 0xb4u, 0x1du, 0x9eu, 0x2eu, 0x44u, 0xc9u, 0x54u, 0x66u, 0xc5u, 0x15u, 0x50u, 0xfeu, 0xa9u, 0x77u, 0x49u, 0x7du, 0xccu, 0x91u, 0xcfu, 0x05u, 0xcau, 0x41u, 0xcbu, 0xe1u, 0xb5u, 0x6fu, 0x8cu, 0x83u, 0x6cu, 0x08u, 0xd1u, 0x8au, 0x1au, 0xbdu, 0xbau, 0xc7u, 0xb6u, 0xc2u, 0x89u, 0x88u, 0xe0u, 0x42u, 0x8du, 0xbeu, 0xafu, 0x43u, 0xd8u, 0xfau, 0xdcu, 0xa6u, 0x0du, 0x27u, 0x95u, 0x39u, 0x84u, 0x80u, 0x3bu, 0x10u, 0xc0u, 0xecu, 0x01u, 0x2du, 0x1eu, 0x98u },
	std::array<qpl::u8, 256> { 0x31u, 0x5eu, 0x01u, 0x81u, 0x6cu, 0x18u, 0xdfu, 0x2au, 0xa6u, 0x35u, 0xeau, 0x5fu, 0x25u, 0x28u, 0x51u, 0xafu, 0x96u, 0x68u, 0x5au, 0xdbu, 0xfcu, 0xcfu, 0x3du, 0xb7u, 0xceu, 0xb2u, 0x4bu, 0xc6u, 0x9au, 0x4du, 0xe1u, 0x50u, 0x52u, 0x71u, 0xc0u, 0xc8u, 0x40u, 0x69u, 0x05u, 0xb1u, 0x5bu, 0x53u, 0x0du, 0xf6u, 0x46u, 0x38u, 0xb4u, 0x39u, 0xbau, 0x23u, 0x26u, 0x02u, 0xebu, 0x80u, 0xdcu, 0x67u, 0x8bu, 0x54u, 0xd3u, 0x9cu, 0x13u, 0xa7u, 0x0cu, 0x0bu, 0x57u, 0x32u, 0x6fu, 0x7du, 0xb5u, 0xd4u, 0x1eu, 0x64u, 0x11u, 0xb9u, 0x00u, 0xf3u, 0x09u, 0xf2u, 0x1fu, 0x24u, 0xc9u, 0x20u, 0x3au, 0x3bu, 0x03u, 0x79u, 0xb3u, 0x07u, 0xbbu, 0x04u, 0x91u, 0xc5u, 0xd9u, 0xe0u, 0xe9u, 0x2cu, 0x97u, 0xe8u, 0x5du, 0x99u, 0x65u, 0x62u, 0x9fu, 0x55u, 0x9du, 0xaau, 0x36u, 0x61u, 0x7au, 0xaeu, 0x93u, 0x41u, 0xd8u, 0x94u, 0x2bu, 0xccu, 0xa4u, 0xbfu, 0xa2u, 0x85u, 0xcbu, 0xb8u, 0x1au, 0x90u, 0x5cu, 0xa8u, 0xd7u, 0x8du, 0x48u, 0xa0u, 0x7cu, 0x84u, 0x1cu, 0x7fu, 0xe7u, 0x29u, 0x14u, 0x21u, 0x2du, 0x43u, 0xbdu, 0x8au, 0x0fu, 0xc1u, 0x9eu, 0x0au, 0x60u, 0x33u, 0x47u, 0x73u, 0xa1u, 0xf8u, 0x83u, 0xb0u, 0xd6u, 0x89u, 0x72u, 0x15u, 0x6bu, 0xadu, 0xacu, 0xf5u, 0xe4u, 0x27u, 0x17u, 0xabu, 0x16u, 0xbeu, 0x9bu, 0xf7u, 0x86u, 0xecu, 0x12u, 0xe6u, 0xa3u, 0x8eu, 0xf9u, 0x75u, 0xffu, 0xbcu, 0xdeu, 0x34u, 0x30u, 0xfeu, 0x76u, 0xd0u, 0xa9u, 0xfau, 0xcdu, 0xd5u, 0x19u, 0x77u, 0x63u, 0xfdu, 0x92u, 0x2fu, 0x3fu, 0x88u, 0x58u, 0xe3u, 0x70u, 0x1bu, 0xa5u, 0x3cu, 0xeeu, 0xf4u, 0x95u, 0xc3u, 0x82u, 0xddu, 0xc7u, 0xfbu, 0x6eu, 0xe2u, 0xb6u, 0x8fu, 0x7bu, 0x8cu, 0x3eu, 0xc2u, 0xd2u, 0x10u, 0xe5u, 0x44u, 0xf1u, 0x87u, 0xcau, 0xefu, 0xedu, 0x4cu, 0xd1u, 0x74u, 0x22u, 0x78u, 0x49u, 0x0eu, 0x4fu, 0x66u, 0x08u, 0x06u, 0x2eu, 0xf0u, 0x7eu, 0xdau, 0x4eu, 0x98u, 0x59u, 0x1du, 0x56u, 0x42u, 0x37u, 0x4au, 0x6au, 0xc4u, 0x6du, 0x45u },
	std::array<qpl::u8, 256> { 0x01u, 0xd7u, 0x17u, 0x45u, 0xd6u, 0x74u, 0x4au, 0xa4u, 0x91u, 0x77u, 0x4bu, 0xd0u, 0xc5u, 0x31u, 0xefu, 0x69u, 0x97u, 0x28u, 0x48u, 0x8bu, 0xeeu, 0x44u, 0x51u, 0x22u, 0x10u, 0xebu, 0x73u, 0x20u, 0x82u, 0x5cu, 0x3au, 0x29u, 0x6bu, 0x3cu, 0xc8u, 0x94u, 0xbbu, 0x49u, 0xc4u, 0x71u, 0x37u, 0x84u, 0xa9u, 0xe1u, 0xdfu, 0x2cu, 0xa3u, 0x60u, 0xceu, 0xfcu, 0xa0u, 0x6eu, 0x5bu, 0xb7u, 0x7du, 0xe8u, 0xe2u, 0x2au, 0x05u, 0xf3u, 0x47u, 0xc7u, 0x4fu, 0x2fu, 0x15u, 0x04u, 0xb2u, 0x4cu, 0x18u, 0xacu, 0xa2u, 0x78u, 0xb8u, 0xe0u, 0x25u, 0xdbu, 0xf2u, 0x1eu, 0xe5u, 0xcfu, 0x14u, 0xf9u, 0xecu, 0x9du, 0x4eu, 0xa8u, 0x50u, 0xcbu, 0xe3u, 0xaau, 0x66u, 0xa6u, 0xd4u, 0xccu, 0xedu, 0x85u, 0x43u, 0x12u, 0x5fu, 0xb1u, 0xb6u, 0xc6u, 0x0eu, 0xcau, 0x8eu, 0x64u, 0x6fu, 0x53u, 0x36u, 0xbcu, 0x8au, 0x9au, 0xb3u, 0x46u, 0x63u, 0x86u, 0xafu, 0x3bu, 0xbdu, 0x92u, 0x02u, 0xd3u, 0xf1u, 0x81u, 0x1du, 0x90u, 0x08u, 0x62u, 0x67u, 0xf5u, 0x24u, 0x30u, 0x5au, 0xd1u, 0xe4u, 0x7au, 0x1fu, 0x00u, 0x79u, 0x89u, 0xc0u, 0x33u, 0x3fu, 0x3du, 0x95u, 0x2eu, 0x21u, 0x19u, 0xfeu, 0x34u, 0x7eu, 0x76u, 0xa1u, 0x2bu, 0x8fu, 0x8cu, 0x39u, 0x75u, 0x56u, 0x23u, 0xf7u, 0x52u, 0xcdu, 0x11u, 0xbeu, 0x0bu, 0x6cu, 0x80u, 0x93u, 0x27u, 0x7bu, 0x6du, 0x55u, 0xb4u, 0x7fu, 0xd5u, 0xe7u, 0x1au, 0xaeu, 0x2du, 0xa5u, 0x57u, 0xc1u, 0x87u, 0x5du, 0xfbu, 0x07u, 0x9fu, 0x9bu, 0xa7u, 0xdcu, 0x83u, 0x7cu, 0x58u, 0xfau, 0xe6u, 0x26u, 0x16u, 0xffu, 0x59u, 0xc9u, 0x1cu, 0xdeu, 0x0cu, 0x54u, 0xeau, 0x98u, 0x8du, 0x6au, 0xddu, 0xe9u, 0xf0u, 0x9cu, 0xc3u, 0xbfu, 0x13u, 0xabu, 0xdau, 0x99u, 0xd8u, 0xd9u, 0x61u, 0x03u, 0x0du, 0x4du, 0x72u, 0xb5u, 0x96u, 0xbau, 0x09u, 0xb9u, 0xb0u, 0x42u, 0xf6u, 0x40u, 0x5eu, 0x88u, 0x38u, 0x0fu, 0x1bu, 0x41u, 0xf4u, 0x3eu, 0x9eu, 0x0au, 0xadu, 0x35u, 0x06u, 0xc2u, 0xf8u, 0xd2u, 0x68u, 0x32u, 0x70u, 0x65u, 0xfdu },
	std::array<qpl::u8, 256> { 0xf1u, 0x07u, 0xa3u, 0xa1u, 0xa4u, 0x3du, 0x11u, 0xf4u, 0x9cu, 0x1eu, 0x55u, 0xa0u, 0x0bu, 0x1du, 0x7bu, 0xa9u, 0x06u, 0x0au, 0xb2u, 0xf8u, 0x5cu, 0xb4u, 0xe7u, 0x5bu, 0x65u, 0x97u, 0xf9u, 0xcbu, 0x2fu, 0xb8u, 0x8eu, 0x5eu, 0x95u, 0xdau, 0xf6u, 0x21u, 0xf7u, 0x04u, 0xedu, 0x50u, 0xc0u, 0x53u, 0xc3u, 0x5au, 0xf2u, 0x01u, 0x75u, 0x20u, 0x6au, 0x4bu, 0x81u, 0x62u, 0x3fu, 0x9fu, 0x3au, 0x36u, 0x2au, 0x4cu, 0x61u, 0xa7u, 0xd1u, 0x56u, 0x91u, 0x6bu, 0xe0u, 0xffu, 0x4du, 0x9bu, 0x1au, 0x7cu, 0x74u, 0x85u, 0xdfu, 0x44u, 0x2du, 0x98u, 0xb0u, 0xb6u, 0x99u, 0xafu, 0xe8u, 0x48u, 0xacu, 0x12u, 0xadu, 0x8au, 0xbbu, 0x84u, 0x2bu, 0xeeu, 0xceu, 0x64u, 0xfeu, 0x79u, 0x69u, 0x86u, 0x00u, 0xe5u, 0x59u, 0xfcu, 0xddu, 0x83u, 0xa6u, 0xdbu, 0x9au, 0xa2u, 0x09u, 0x47u, 0x3bu, 0xd2u, 0x6du, 0xbdu, 0x4fu, 0x92u, 0x4eu, 0xccu, 0x96u, 0x87u, 0x29u, 0xd3u, 0xcau, 0xefu, 0x7fu, 0x60u, 0x22u, 0x0eu, 0xa8u, 0xb5u, 0x57u, 0xb1u, 0x25u, 0xd6u, 0xf3u, 0x42u, 0x7au, 0x6fu, 0x8bu, 0xebu, 0xd9u, 0x08u, 0x0fu, 0xbeu, 0x15u, 0x94u, 0x7eu, 0x82u, 0x39u, 0xd7u, 0x0du, 0xaeu, 0x41u, 0x68u, 0xdcu, 0x17u, 0xaau, 0xe6u, 0x2cu, 0x34u, 0x16u, 0xecu, 0x8du, 0x4au, 0xf5u, 0x8cu, 0x05u, 0x1cu, 0x45u, 0x58u, 0xc5u, 0x76u, 0x23u, 0x51u, 0x02u, 0x93u, 0xd8u, 0x72u, 0x32u, 0xa5u, 0x43u, 0x28u, 0x30u, 0xc2u, 0xbau, 0x80u, 0x73u, 0xc7u, 0xabu, 0x7du, 0xc8u, 0x49u, 0xc1u, 0x10u, 0x19u, 0x63u, 0xe9u, 0x37u, 0x90u, 0xeau, 0xfau, 0xf0u, 0xdeu, 0x67u, 0x14u, 0xbcu, 0xc4u, 0xc9u, 0x46u, 0x18u, 0xb3u, 0x13u, 0x3cu, 0x27u, 0x40u, 0x1bu, 0x77u, 0xfdu, 0xe2u, 0x54u, 0x5du, 0x33u, 0x2eu, 0xc6u, 0x70u, 0xfbu, 0x52u, 0x89u, 0xd4u, 0x24u, 0x66u, 0xe4u, 0x35u, 0x03u, 0xe3u, 0x8fu, 0x3eu, 0xb7u, 0x0cu, 0x31u, 0x78u, 0x9eu, 0x38u, 0x5fu, 0x1fu, 0xd5u, 0x6eu, 0xd0u, 0x6cu, 0x26u, 0x88u, 0xb9u, 0xcfu, 0xbfu, 0xcdu, 0x9du, 0xe1u, 0x71u },
	std::array<qpl::u8, 256> { 0x8au, 0xc9u, 0xa5u, 0xd4u, 0xd9u, 0xc3u, 0xfbu, 0x0cu, 0x68u, 0x58u, 0x04u, 0xa8u, 0x10u, 0x49u, 0xe0u, 0x07u, 0xedu, 0x5au, 0x65u, 0x56u, 0x00u, 0xceu, 0xb4u, 0xd5u, 0x5eu, 0x20u, 0x2eu, 0x76u, 0xc1u, 0xdcu, 0x0au, 0x64u, 0x62u, 0xe9u, 0x34u, 0xa3u, 0x72u, 0x33u, 0x96u, 0xf9u, 0x44u, 0xbau, 0x95u, 0xeeu, 0xf4u, 0x69u, 0x21u, 0x82u, 0x8eu, 0x40u, 0x60u, 0xddu, 0x0eu, 0xffu, 0x85u, 0x3du, 0xfau, 0xdau, 0x66u, 0xb3u, 0xd7u, 0x30u, 0xc8u, 0x53u, 0x4du, 0x6eu, 0x4eu, 0x2du, 0x3fu, 0x23u, 0xd3u, 0x16u, 0xbeu, 0x35u, 0xcdu, 0x98u, 0x32u, 0x83u, 0xcbu, 0x3bu, 0x09u, 0xaeu, 0xdbu, 0x5du, 0x47u, 0xe7u, 0x19u, 0xacu, 0xcau, 0x80u, 0x1au, 0x1bu, 0x45u, 0x7du, 0x26u, 0xecu, 0x8fu, 0x6fu, 0xa9u, 0x06u, 0x46u, 0xebu, 0x77u, 0xb0u, 0x2cu, 0xd2u, 0x17u, 0xe2u, 0x4cu, 0xabu, 0xa1u, 0xb6u, 0xb7u, 0x91u, 0x12u, 0x42u, 0x39u, 0xbdu, 0xf0u, 0x50u, 0xa0u, 0x86u, 0x94u, 0xa7u, 0x9cu, 0x4fu, 0xf5u, 0xdfu, 0x6cu, 0x18u, 0x5fu, 0x9eu, 0x9bu, 0x05u, 0xd8u, 0x14u, 0xf2u, 0x11u, 0x51u, 0x38u, 0x15u, 0x59u, 0x31u, 0xefu, 0xb5u, 0x1du, 0x27u, 0x7eu, 0x5bu, 0x67u, 0xe3u, 0x9au, 0x2fu, 0x8du, 0x0fu, 0x43u, 0x7cu, 0xc5u, 0x03u, 0xb8u, 0xe4u, 0xeau, 0x02u, 0xd1u, 0x28u, 0xf3u, 0x1cu, 0x99u, 0xd6u, 0xbfu, 0x93u, 0x0bu, 0xaau, 0x2au, 0xf7u, 0x1eu, 0xbbu, 0xbcu, 0x8bu, 0x54u, 0xccu, 0xc7u, 0xc2u, 0x61u, 0x13u, 0xdeu, 0x6bu, 0x08u, 0x55u, 0x3au, 0xb1u, 0x5cu, 0x97u, 0x2bu, 0x7au, 0xb2u, 0xfdu, 0x71u, 0xfeu, 0x52u, 0x8cu, 0x75u, 0xf6u, 0xafu, 0x73u, 0x29u, 0x3cu, 0x6au, 0x7bu, 0x70u, 0x57u, 0xa6u, 0x63u, 0xe8u, 0x74u, 0x90u, 0xb9u, 0xc0u, 0xe1u, 0x89u, 0xcfu, 0x84u, 0x4bu, 0x1fu, 0x41u, 0xa2u, 0x36u, 0x88u, 0xa4u, 0xd0u, 0xc4u, 0xfcu, 0x48u, 0x7fu, 0xe6u, 0x4au, 0x9fu, 0x6du, 0xf1u, 0x01u, 0xf8u, 0x79u, 0xc6u, 0x25u, 0x24u, 0x81u, 0x3eu, 0x78u, 0x37u, 0xe5u, 0x92u, 0x0du, 0x9du, 0x22u, 0x87u, 0xadu },
	std::array<qpl::u8, 256> { 0x4fu, 0x2bu, 0x72u, 0x53u, 0xe3u, 0x75u, 0x24u, 0x66u, 0x80u, 0xf7u, 0xffu, 0xc1u, 0x92u, 0x3eu, 0xa0u, 0xdfu, 0x96u, 0x55u, 0xc5u, 0xa9u, 0xf6u, 0x77u, 0x94u, 0xdcu, 0xeau, 0x95u, 0xb1u, 0x2au, 0x5cu, 0xc7u, 0xf5u, 0x31u, 0x8fu, 0xd3u, 0xfcu, 0xf1u, 0x41u, 0x02u, 0x9fu, 0xfeu, 0xbcu, 0x13u, 0xd5u, 0x38u, 0x1bu, 0xa4u, 0x21u, 0x78u, 0x00u, 0x85u, 0x25u, 0xbbu, 0xb9u, 0x9au, 0xe1u, 0x4eu, 0x61u, 0xe5u, 0x37u, 0xd7u, 0xcdu, 0x6eu, 0x7eu, 0x67u, 0xcfu, 0xc8u, 0x49u, 0x42u, 0xf9u, 0xa5u, 0x6du, 0xe7u, 0x5bu, 0x35u, 0xe9u, 0xebu, 0x1au, 0x1cu, 0xa6u, 0x05u, 0xfdu, 0x79u, 0xbfu, 0x23u, 0x0du, 0xf0u, 0x5eu, 0x28u, 0x60u, 0xe6u, 0xa8u, 0x73u, 0xa2u, 0xa3u, 0x99u, 0xacu, 0x9du, 0x2fu, 0x8cu, 0x17u, 0x3au, 0x98u, 0x8du, 0x01u, 0x59u, 0x82u, 0xbeu, 0x5au, 0xbau, 0xfbu, 0x6bu, 0x15u, 0xdbu, 0x74u, 0x6cu, 0x56u, 0x63u, 0x69u, 0x54u, 0xb5u, 0x36u, 0x5du, 0x11u, 0x45u, 0x3fu, 0xa7u, 0x1eu, 0x0eu, 0x89u, 0x51u, 0x09u, 0x2du, 0x7au, 0xf8u, 0x46u, 0x52u, 0xadu, 0x87u, 0x2cu, 0xe2u, 0x10u, 0x9eu, 0xd1u, 0xf3u, 0x93u, 0x16u, 0x84u, 0xd6u, 0x83u, 0xd2u, 0xe0u, 0xcbu, 0x9cu, 0x6au, 0x64u, 0x57u, 0xb0u, 0x04u, 0xc3u, 0xecu, 0x14u, 0x97u, 0xb3u, 0xaeu, 0x29u, 0x7bu, 0xafu, 0x7fu, 0x8bu, 0x4au, 0x1du, 0x5fu, 0x12u, 0x47u, 0x70u, 0x0bu, 0x34u, 0xb7u, 0xabu, 0x08u, 0xb8u, 0x40u, 0xccu, 0x20u, 0x3bu, 0xf4u, 0x71u, 0xbdu, 0xb6u, 0x7du, 0x48u, 0xb2u, 0x4cu, 0x27u, 0x0fu, 0x2eu, 0x06u, 0x18u, 0x58u, 0xd0u, 0x39u, 0xceu, 0x43u, 0x6fu, 0xdeu, 0xaau, 0x0au, 0x91u, 0xc9u, 0x68u, 0xd8u, 0x81u, 0xc2u, 0xc0u, 0x19u, 0x32u, 0xcau, 0x22u, 0xedu, 0x4du, 0xddu, 0xc4u, 0xd9u, 0x8eu, 0xe8u, 0xa1u, 0x9bu, 0xfau, 0x4bu, 0xeeu, 0x44u, 0x07u, 0x8au, 0x1fu, 0x90u, 0x76u, 0x65u, 0xf2u, 0x7cu, 0xc6u, 0x3du, 0xd4u, 0x62u, 0x50u, 0xe4u, 0xb4u, 0x3cu, 0x88u, 0x0cu, 0x03u, 0xdau, 0x30u, 0xefu, 0x86u, 0x33u, 0x26u },
	std::array<qpl::u8, 256> { 0xd3u, 0x6du, 0x2au, 0xc1u, 0x9bu, 0x89u, 0x25u, 0x7cu, 0x56u, 0x7du, 0x02u, 0x2fu, 0x40u, 0xd4u, 0x13u, 0x15u, 0xfau, 0x76u, 0x0au, 0xa8u, 0xf4u, 0x98u, 0xe5u, 0x34u, 0x6bu, 0xc6u, 0xe1u, 0xf0u, 0xafu, 0x9cu, 0x5du, 0x84u, 0x93u, 0x73u, 0xd6u, 0xacu, 0x8au, 0x6au, 0xf3u, 0x30u, 0xd8u, 0xbeu, 0xd7u, 0x33u, 0xeau, 0x2cu, 0x28u, 0x65u, 0x1du, 0x60u, 0x3eu, 0x38u, 0xdbu, 0x96u, 0x52u, 0x97u, 0x7eu, 0x88u, 0x53u, 0x7fu, 0xe6u, 0x09u, 0xc8u, 0x3cu, 0x17u, 0x35u, 0x99u, 0xbau, 0xf8u, 0x46u, 0xa0u, 0x3au, 0x44u, 0x92u, 0x45u, 0x0cu, 0xcau, 0x59u, 0xe4u, 0xc7u, 0xefu, 0xccu, 0x01u, 0xa1u, 0x23u, 0xf6u, 0x39u, 0x81u, 0x69u, 0x71u, 0x75u, 0xf2u, 0xe9u, 0x1bu, 0xfcu, 0x54u, 0x8bu, 0x83u, 0x6cu, 0x77u, 0x37u, 0x4du, 0x6eu, 0x4bu, 0xd9u, 0x29u, 0x14u, 0xddu, 0x78u, 0xcdu, 0x95u, 0x4eu, 0x26u, 0x70u, 0xd1u, 0x90u, 0xb8u, 0x74u, 0x05u, 0x3du, 0x49u, 0x5bu, 0xaau, 0x4au, 0x72u, 0x57u, 0xa6u, 0x2du, 0xedu, 0x67u, 0xf7u, 0xdeu, 0x61u, 0x31u, 0x1cu, 0x94u, 0x4fu, 0xb1u, 0x5eu, 0x8fu, 0xfbu, 0xe7u, 0xbfu, 0xa5u, 0x32u, 0x41u, 0x3bu, 0x24u, 0x6fu, 0x8cu, 0xf1u, 0x7bu, 0x9du, 0xd2u, 0x79u, 0xa9u, 0xecu, 0x0du, 0xfdu, 0x5cu, 0xe2u, 0xb2u, 0xb4u, 0x03u, 0xebu, 0xa2u, 0xd5u, 0xe0u, 0xadu, 0x10u, 0x8du, 0x06u, 0x42u, 0x0eu, 0x3fu, 0x11u, 0x43u, 0x9au, 0xc9u, 0x22u, 0xe3u, 0x00u, 0xbcu, 0x5au, 0x0fu, 0x07u, 0x27u, 0xb6u, 0xdcu, 0x36u, 0xf5u, 0x87u, 0x55u, 0xfeu, 0x66u, 0x64u, 0x0bu, 0xdfu, 0xa4u, 0x19u, 0xc0u, 0x21u, 0xd0u, 0x4cu, 0x12u, 0xc5u, 0xc2u, 0xf9u, 0xceu, 0x63u, 0x04u, 0xa3u, 0x9eu, 0xb5u, 0x9fu, 0xcfu, 0x51u, 0x1eu, 0xcbu, 0x85u, 0x62u, 0xb9u, 0x16u, 0x1fu, 0x68u, 0x20u, 0xc4u, 0x80u, 0x91u, 0x86u, 0xffu, 0x58u, 0x08u, 0x5fu, 0x50u, 0xaeu, 0x18u, 0x1au, 0x48u, 0xa7u, 0xb7u, 0xb0u, 0xc3u, 0xb3u, 0xabu, 0xbbu, 0x82u, 0xdau, 0xe8u, 0x2eu, 0x2bu, 0xbdu, 0x8eu, 0x47u, 0x7au, 0xeeu },
	std::array<qpl::u8, 256> { 0x58u, 0x74u, 0xc2u, 0x92u, 0x83u, 0xf9u, 0xcfu, 0xb4u, 0x56u, 0x0eu, 0x46u, 0x48u, 0x6eu, 0xdbu, 0xabu, 0xc1u, 0xecu, 0xadu, 0x75u, 0x73u, 0xf3u, 0x6du, 0xb7u, 0x11u, 0xa3u, 0x76u, 0xb1u, 0x2fu, 0x8au, 0xbcu, 0xf0u, 0x82u, 0xdcu, 0x7au, 0xefu, 0x78u, 0x61u, 0xbfu, 0x4eu, 0x04u, 0x51u, 0xc3u, 0x1du, 0x9eu, 0xdeu, 0x39u, 0x18u, 0xa4u, 0xd3u, 0x4au, 0x17u, 0x19u, 0x38u, 0xbdu, 0x10u, 0x0au, 0x72u, 0x91u, 0x9cu, 0xc0u, 0xcau, 0xebu, 0xaeu, 0x81u, 0xa9u, 0x22u, 0x8fu, 0x2cu, 0xd4u, 0xd9u, 0x85u, 0x1au, 0x0cu, 0xfeu, 0x4bu, 0x3du, 0xe5u, 0xf5u, 0x93u, 0x50u, 0xbeu, 0xaau, 0x4du, 0xc7u, 0xd0u, 0xd7u, 0xeeu, 0xf6u, 0x24u, 0xceu, 0x8eu, 0x4fu, 0x3bu, 0x42u, 0x1cu, 0x6fu, 0x9du, 0x2du, 0xe1u, 0xe7u, 0x34u, 0x5au, 0xa1u, 0x8du, 0x0fu, 0xcbu, 0xa6u, 0x47u, 0x37u, 0xe3u, 0x09u, 0xc5u, 0x99u, 0xb2u, 0x66u, 0x1eu, 0x68u, 0x32u, 0xbbu, 0x67u, 0xb3u, 0xc9u, 0xafu, 0x31u, 0x15u, 0xddu, 0x69u, 0xd6u, 0xbau, 0x95u, 0x06u, 0x71u, 0x2eu, 0x7bu, 0x40u, 0xb8u, 0x07u, 0x87u, 0x59u, 0x5du, 0x94u, 0x52u, 0x77u, 0xfdu, 0x1fu, 0x21u, 0xd8u, 0x9au, 0xfau, 0x33u, 0x53u, 0x7fu, 0x45u, 0x2bu, 0x44u, 0x6au, 0xccu, 0x9fu, 0x63u, 0xb9u, 0x36u, 0xa5u, 0xf4u, 0xb6u, 0x35u, 0xa2u, 0x86u, 0x27u, 0x0bu, 0x64u, 0x20u, 0x62u, 0x9bu, 0xc4u, 0x30u, 0xe4u, 0x60u, 0xfcu, 0x97u, 0x3cu, 0x3fu, 0xcdu, 0x49u, 0xeau, 0xf2u, 0x7du, 0xe2u, 0xf1u, 0xd5u, 0x3au, 0x70u, 0x25u, 0xdfu, 0xe6u, 0xdau, 0xc6u, 0x54u, 0xedu, 0x7cu, 0x0du, 0x96u, 0xa0u, 0x89u, 0x5bu, 0x01u, 0x2au, 0xa7u, 0xe8u, 0x7eu, 0x08u, 0x13u, 0x12u, 0x65u, 0x90u, 0x43u, 0x80u, 0x02u, 0xd2u, 0x79u, 0xd1u, 0x55u, 0x26u, 0x5cu, 0x98u, 0x14u, 0x84u, 0x3eu, 0xacu, 0x6bu, 0xc8u, 0x57u, 0xfbu, 0xf8u, 0xb0u, 0xe9u, 0x8bu, 0x28u, 0xa8u, 0xf7u, 0xb5u, 0x00u, 0x23u, 0x88u, 0x8cu, 0x29u, 0x5eu, 0x6cu, 0x03u, 0x41u, 0x05u, 0xffu, 0x4cu, 0x5fu, 0x16u, 0x1bu, 0xe0u },
};

constexpr auto tables64 = std::array {
	std::array<qpl::u8, 64> { 0x05u, 0x37u, 0x20u, 0x2cu, 0x01u, 0x31u, 0x1fu, 0x0du, 0x2du, 0x24u, 0x2eu, 0x35u, 0x0fu, 0x2au, 0x38u, 0x10u, 0x11u, 0x17u, 0x25u, 0x18u, 0x00u, 0x07u, 0x09u, 0x14u, 0x30u, 0x1eu, 0x0eu, 0x39u, 0x34u, 0x3cu, 0x2bu, 0x08u, 0x16u, 0x3du, 0x15u, 0x1cu, 0x3bu, 0x1au, 0x3au, 0x06u, 0x02u, 0x2fu, 0x1bu, 0x0au, 0x0cu, 0x13u, 0x27u, 0x21u, 0x29u, 0x23u, 0x04u, 0x0bu, 0x12u, 0x3fu, 0x3eu, 0x03u, 0x33u, 0x32u, 0x19u, 0x36u, 0x1du, 0x22u, 0x28u, 0x26u },
	std::array<qpl::u8, 64> { 0x13u, 0x07u, 0x06u, 0x1bu, 0x18u, 0x20u, 0x1eu, 0x08u, 0x25u, 0x21u, 0x3fu, 0x26u, 0x36u, 0x0bu, 0x14u, 0x2cu, 0x35u, 0x01u, 0x1du, 0x3du, 0x1cu, 0x1au, 0x12u, 0x2eu, 0x0eu, 0x27u, 0x10u, 0x03u, 0x16u, 0x24u, 0x31u, 0x29u, 0x34u, 0x3au, 0x32u, 0x0au, 0x2du, 0x0du, 0x09u, 0x15u, 0x19u, 0x2fu, 0x30u, 0x02u, 0x00u, 0x23u, 0x17u, 0x38u, 0x05u, 0x3bu, 0x0cu, 0x3eu, 0x28u, 0x04u, 0x1fu, 0x33u, 0x39u, 0x0fu, 0x11u, 0x2au, 0x37u, 0x2bu, 0x3cu, 0x22u },
	std::array<qpl::u8, 64> { 0x11u, 0x2au, 0x10u, 0x16u, 0x3cu, 0x13u, 0x1bu, 0x3au, 0x2du, 0x27u, 0x09u, 0x03u, 0x18u, 0x0fu, 0x08u, 0x23u, 0x01u, 0x31u, 0x30u, 0x14u, 0x07u, 0x33u, 0x39u, 0x1cu, 0x1au, 0x17u, 0x1du, 0x02u, 0x04u, 0x2bu, 0x22u, 0x0bu, 0x0au, 0x37u, 0x1eu, 0x2eu, 0x28u, 0x2cu, 0x25u, 0x05u, 0x2fu, 0x1fu, 0x19u, 0x34u, 0x26u, 0x29u, 0x12u, 0x24u, 0x0eu, 0x20u, 0x3eu, 0x06u, 0x38u, 0x00u, 0x0du, 0x3bu, 0x35u, 0x3fu, 0x15u, 0x3du, 0x0cu, 0x36u, 0x21u, 0x32u },
	std::array<qpl::u8, 64> { 0x39u, 0x0fu, 0x18u, 0x2fu, 0x2cu, 0x2eu, 0x3fu, 0x05u, 0x0eu, 0x13u, 0x11u, 0x1bu, 0x01u, 0x10u, 0x25u, 0x1du, 0x0cu, 0x3bu, 0x34u, 0x04u, 0x07u, 0x06u, 0x31u, 0x1cu, 0x2bu, 0x29u, 0x21u, 0x37u, 0x1fu, 0x23u, 0x17u, 0x26u, 0x1eu, 0x03u, 0x24u, 0x09u, 0x0au, 0x02u, 0x3cu, 0x0bu, 0x19u, 0x16u, 0x15u, 0x27u, 0x12u, 0x1au, 0x33u, 0x32u, 0x00u, 0x2du, 0x38u, 0x30u, 0x3eu, 0x0du, 0x22u, 0x08u, 0x35u, 0x2au, 0x20u, 0x36u, 0x3du, 0x3au, 0x28u, 0x14u },
	std::array<qpl::u8, 64> { 0x21u, 0x30u, 0x07u, 0x09u, 0x3cu, 0x04u, 0x02u, 0x19u, 0x34u, 0x00u, 0x1cu, 0x2fu, 0x03u, 0x12u, 0x39u, 0x27u, 0x38u, 0x18u, 0x26u, 0x15u, 0x06u, 0x29u, 0x1fu, 0x2au, 0x01u, 0x1au, 0x20u, 0x32u, 0x0eu, 0x3eu, 0x35u, 0x2cu, 0x0bu, 0x1eu, 0x3fu, 0x05u, 0x33u, 0x3au, 0x25u, 0x1bu, 0x0cu, 0x11u, 0x2eu, 0x22u, 0x14u, 0x13u, 0x36u, 0x10u, 0x0au, 0x17u, 0x0du, 0x2bu, 0x31u, 0x08u, 0x3du, 0x24u, 0x23u, 0x37u, 0x0fu, 0x16u, 0x1du, 0x28u, 0x3bu, 0x2du },
	std::array<qpl::u8, 64> { 0x1au, 0x0bu, 0x0du, 0x1eu, 0x32u, 0x39u, 0x18u, 0x26u, 0x0fu, 0x16u, 0x3bu, 0x00u, 0x25u, 0x17u, 0x2eu, 0x09u, 0x3fu, 0x2cu, 0x21u, 0x0cu, 0x36u, 0x08u, 0x31u, 0x15u, 0x24u, 0x13u, 0x33u, 0x1fu, 0x0eu, 0x01u, 0x11u, 0x06u, 0x30u, 0x22u, 0x3au, 0x05u, 0x3du, 0x14u, 0x04u, 0x35u, 0x27u, 0x1bu, 0x34u, 0x29u, 0x02u, 0x38u, 0x3eu, 0x28u, 0x3cu, 0x12u, 0x37u, 0x2du, 0x2bu, 0x2au, 0x10u, 0x2fu, 0x19u, 0x03u, 0x20u, 0x07u, 0x23u, 0x0au, 0x1cu, 0x1du },
	std::array<qpl::u8, 64> { 0x1bu, 0x3fu, 0x3bu, 0x25u, 0x3eu, 0x3du, 0x0au, 0x0cu, 0x09u, 0x1au, 0x03u, 0x19u, 0x23u, 0x29u, 0x2bu, 0x0eu, 0x2cu, 0x2eu, 0x0bu, 0x30u, 0x38u, 0x2du, 0x2au, 0x08u, 0x33u, 0x11u, 0x31u, 0x1cu, 0x06u, 0x07u, 0x26u, 0x3cu, 0x17u, 0x13u, 0x20u, 0x14u, 0x12u, 0x00u, 0x28u, 0x05u, 0x24u, 0x22u, 0x34u, 0x32u, 0x1fu, 0x04u, 0x35u, 0x0fu, 0x36u, 0x1du, 0x10u, 0x2fu, 0x37u, 0x18u, 0x0du, 0x15u, 0x27u, 0x1eu, 0x01u, 0x21u, 0x3au, 0x02u, 0x16u, 0x39u },
	std::array<qpl::u8, 64> { 0x0cu, 0x1eu, 0x27u, 0x24u, 0x37u, 0x11u, 0x03u, 0x30u, 0x04u, 0x36u, 0x39u, 0x1du, 0x0fu, 0x1bu, 0x31u, 0x28u, 0x23u, 0x19u, 0x3cu, 0x0au, 0x06u, 0x3eu, 0x20u, 0x18u, 0x1cu, 0x13u, 0x25u, 0x2fu, 0x2au, 0x16u, 0x2du, 0x21u, 0x02u, 0x3au, 0x32u, 0x3bu, 0x29u, 0x0eu, 0x33u, 0x34u, 0x07u, 0x1fu, 0x2cu, 0x1au, 0x38u, 0x35u, 0x05u, 0x10u, 0x12u, 0x14u, 0x2bu, 0x3du, 0x08u, 0x00u, 0x2eu, 0x0du, 0x26u, 0x09u, 0x01u, 0x15u, 0x0bu, 0x17u, 0x3fu, 0x22u },
	std::array<qpl::u8, 64> { 0x30u, 0x26u, 0x3du, 0x13u, 0x2bu, 0x3cu, 0x21u, 0x2du, 0x1au, 0x17u, 0x34u, 0x23u, 0x06u, 0x0cu, 0x02u, 0x22u, 0x16u, 0x15u, 0x3fu, 0x29u, 0x39u, 0x04u, 0x3bu, 0x33u, 0x19u, 0x07u, 0x01u, 0x2fu, 0x05u, 0x32u, 0x25u, 0x0au, 0x1bu, 0x1eu, 0x31u, 0x3au, 0x1du, 0x2eu, 0x38u, 0x20u, 0x00u, 0x24u, 0x36u, 0x0fu, 0x18u, 0x35u, 0x11u, 0x1fu, 0x0eu, 0x28u, 0x37u, 0x12u, 0x2cu, 0x08u, 0x2au, 0x27u, 0x03u, 0x1cu, 0x0du, 0x10u, 0x0bu, 0x14u, 0x09u, 0x3eu },
	std::array<qpl::u8, 64> { 0x1eu, 0x11u, 0x29u, 0x10u, 0x28u, 0x37u, 0x00u, 0x32u, 0x39u, 0x3bu, 0x0bu, 0x22u, 0x21u, 0x1du, 0x38u, 0x03u, 0x0eu, 0x12u, 0x26u, 0x34u, 0x1fu, 0x06u, 0x19u, 0x1bu, 0x0du, 0x31u, 0x33u, 0x36u, 0x3cu, 0x2au, 0x0au, 0x3fu, 0x3au, 0x1au, 0x24u, 0x1cu, 0x08u, 0x09u, 0x01u, 0x13u, 0x15u, 0x2cu, 0x25u, 0x18u, 0x20u, 0x2bu, 0x2fu, 0x30u, 0x2eu, 0x23u, 0x2du, 0x04u, 0x02u, 0x14u, 0x3du, 0x27u, 0x0cu, 0x35u, 0x3eu, 0x17u, 0x16u, 0x0fu, 0x05u, 0x07u },
	std::array<qpl::u8, 64> { 0x07u, 0x1au, 0x38u, 0x0au, 0x2du, 0x0du, 0x20u, 0x05u, 0x1fu, 0x0cu, 0x32u, 0x16u, 0x3fu, 0x30u, 0x23u, 0x27u, 0x2bu, 0x10u, 0x09u, 0x26u, 0x12u, 0x31u, 0x3cu, 0x29u, 0x02u, 0x18u, 0x2au, 0x00u, 0x33u, 0x3bu, 0x28u, 0x08u, 0x3au, 0x17u, 0x2eu, 0x0bu, 0x15u, 0x21u, 0x11u, 0x13u, 0x1eu, 0x14u, 0x22u, 0x06u, 0x37u, 0x1bu, 0x0fu, 0x36u, 0x2cu, 0x03u, 0x24u, 0x39u, 0x19u, 0x34u, 0x35u, 0x04u, 0x25u, 0x3eu, 0x3du, 0x2fu, 0x1du, 0x01u, 0x1cu, 0x0eu },
	std::array<qpl::u8, 64> { 0x39u, 0x16u, 0x37u, 0x30u, 0x19u, 0x15u, 0x3cu, 0x10u, 0x2bu, 0x33u, 0x35u, 0x3eu, 0x25u, 0x2au, 0x3fu, 0x29u, 0x36u, 0x0du, 0x24u, 0x00u, 0x17u, 0x0cu, 0x3du, 0x38u, 0x11u, 0x2cu, 0x04u, 0x0eu, 0x2fu, 0x14u, 0x22u, 0x02u, 0x18u, 0x05u, 0x1au, 0x1eu, 0x1cu, 0x01u, 0x23u, 0x2eu, 0x09u, 0x27u, 0x28u, 0x26u, 0x08u, 0x0bu, 0x1du, 0x03u, 0x34u, 0x3au, 0x06u, 0x21u, 0x31u, 0x2du, 0x1fu, 0x32u, 0x0fu, 0x1bu, 0x13u, 0x20u, 0x07u, 0x12u, 0x3bu, 0x0au },
	std::array<qpl::u8, 64> { 0x17u, 0x25u, 0x15u, 0x0bu, 0x3cu, 0x12u, 0x2au, 0x3fu, 0x00u, 0x29u, 0x3bu, 0x2eu, 0x09u, 0x2cu, 0x1cu, 0x1eu, 0x07u, 0x28u, 0x37u, 0x24u, 0x1au, 0x21u, 0x36u, 0x38u, 0x01u, 0x3eu, 0x2bu, 0x08u, 0x14u, 0x19u, 0x16u, 0x2fu, 0x18u, 0x05u, 0x31u, 0x13u, 0x04u, 0x02u, 0x2du, 0x3du, 0x26u, 0x3au, 0x0au, 0x0eu, 0x22u, 0x10u, 0x39u, 0x35u, 0x06u, 0x1du, 0x0cu, 0x27u, 0x32u, 0x1fu, 0x23u, 0x11u, 0x1bu, 0x03u, 0x20u, 0x30u, 0x0fu, 0x0du, 0x33u, 0x34u },
	std::array<qpl::u8, 64> { 0x28u, 0x3eu, 0x08u, 0x23u, 0x10u, 0x36u, 0x2eu, 0x2cu, 0x22u, 0x37u, 0x3au, 0x1au, 0x1cu, 0x29u, 0x27u, 0x07u, 0x09u, 0x24u, 0x3fu, 0x31u, 0x00u, 0x0du, 0x14u, 0x32u, 0x1eu, 0x18u, 0x26u, 0x34u, 0x39u, 0x3bu, 0x3cu, 0x16u, 0x01u, 0x02u, 0x30u, 0x2fu, 0x1bu, 0x2au, 0x05u, 0x1du, 0x3du, 0x15u, 0x12u, 0x13u, 0x20u, 0x04u, 0x17u, 0x2du, 0x35u, 0x0au, 0x0fu, 0x0cu, 0x0eu, 0x38u, 0x0bu, 0x21u, 0x2bu, 0x03u, 0x11u, 0x25u, 0x33u, 0x06u, 0x19u, 0x1fu },
	std::array<qpl::u8, 64> { 0x3fu, 0x31u, 0x30u, 0x2cu, 0x10u, 0x17u, 0x3cu, 0x02u, 0x1cu, 0x35u, 0x01u, 0x12u, 0x23u, 0x37u, 0x24u, 0x2bu, 0x1du, 0x22u, 0x3eu, 0x2fu, 0x0eu, 0x1fu, 0x03u, 0x3au, 0x1eu, 0x2du, 0x0fu, 0x0du, 0x25u, 0x21u, 0x19u, 0x08u, 0x0cu, 0x26u, 0x34u, 0x14u, 0x11u, 0x33u, 0x16u, 0x0bu, 0x3bu, 0x3du, 0x38u, 0x32u, 0x1au, 0x07u, 0x20u, 0x15u, 0x05u, 0x13u, 0x1bu, 0x04u, 0x00u, 0x39u, 0x28u, 0x2eu, 0x2au, 0x09u, 0x06u, 0x0au, 0x27u, 0x36u, 0x18u, 0x29u },
	std::array<qpl::u8, 64> { 0x3au, 0x19u, 0x33u, 0x38u, 0x36u, 0x08u, 0x3fu, 0x30u, 0x0du, 0x07u, 0x15u, 0x12u, 0x1fu, 0x23u, 0x1bu, 0x03u, 0x06u, 0x2eu, 0x0fu, 0x17u, 0x2bu, 0x2fu, 0x18u, 0x3du, 0x22u, 0x25u, 0x11u, 0x1au, 0x16u, 0x29u, 0x27u, 0x21u, 0x01u, 0x1eu, 0x10u, 0x35u, 0x0au, 0x32u, 0x3eu, 0x2cu, 0x1du, 0x2du, 0x0eu, 0x34u, 0x31u, 0x2au, 0x3cu, 0x37u, 0x0bu, 0x02u, 0x39u, 0x24u, 0x13u, 0x14u, 0x0cu, 0x28u, 0x00u, 0x09u, 0x1cu, 0x26u, 0x04u, 0x20u, 0x3bu, 0x05u },
};

constexpr auto tables64_inverse = std::array{
	std::array<qpl::u8, 64> { 0x14u, 0x04u, 0x28u, 0x37u, 0x32u, 0x00u, 0x27u, 0x15u, 0x1fu, 0x16u, 0x2bu, 0x33u, 0x2cu, 0x07u, 0x1au, 0x0cu, 0x0fu, 0x10u, 0x34u, 0x2du, 0x17u, 0x22u, 0x20u, 0x11u, 0x13u, 0x3au, 0x25u, 0x2au, 0x23u, 0x3cu, 0x19u, 0x06u, 0x02u, 0x2fu, 0x3du, 0x31u, 0x09u, 0x12u, 0x3fu, 0x2eu, 0x3eu, 0x30u, 0x0du, 0x1eu, 0x03u, 0x08u, 0x0au, 0x29u, 0x18u, 0x05u, 0x39u, 0x38u, 0x1cu, 0x0bu, 0x3bu, 0x01u, 0x0eu, 0x1bu, 0x26u, 0x24u, 0x1du, 0x21u, 0x36u, 0x35u },
	std::array<qpl::u8, 64> { 0x2cu, 0x11u, 0x2bu, 0x1bu, 0x35u, 0x30u, 0x02u, 0x01u, 0x07u, 0x26u, 0x23u, 0x0du, 0x32u, 0x25u, 0x18u, 0x39u, 0x1au, 0x3au, 0x16u, 0x00u, 0x0eu, 0x27u, 0x1cu, 0x2eu, 0x04u, 0x28u, 0x15u, 0x03u, 0x14u, 0x12u, 0x06u, 0x36u, 0x05u, 0x09u, 0x3fu, 0x2du, 0x1du, 0x08u, 0x0bu, 0x19u, 0x34u, 0x1fu, 0x3bu, 0x3du, 0x0fu, 0x24u, 0x17u, 0x29u, 0x2au, 0x1eu, 0x22u, 0x37u, 0x20u, 0x10u, 0x0cu, 0x3cu, 0x2fu, 0x38u, 0x21u, 0x31u, 0x3eu, 0x13u, 0x33u, 0x0au },
	std::array<qpl::u8, 64> { 0x35u, 0x10u, 0x1bu, 0x0bu, 0x1cu, 0x27u, 0x33u, 0x14u, 0x0eu, 0x0au, 0x20u, 0x1fu, 0x3cu, 0x36u, 0x30u, 0x0du, 0x02u, 0x00u, 0x2eu, 0x05u, 0x13u, 0x3au, 0x03u, 0x19u, 0x0cu, 0x2au, 0x18u, 0x06u, 0x17u, 0x1au, 0x22u, 0x29u, 0x31u, 0x3eu, 0x1eu, 0x0fu, 0x2fu, 0x26u, 0x2cu, 0x09u, 0x24u, 0x2du, 0x01u, 0x1du, 0x25u, 0x08u, 0x23u, 0x28u, 0x12u, 0x11u, 0x3fu, 0x15u, 0x2bu, 0x38u, 0x3du, 0x21u, 0x34u, 0x16u, 0x07u, 0x37u, 0x04u, 0x3bu, 0x32u, 0x39u },
	std::array<qpl::u8, 64> { 0x30u, 0x0cu, 0x25u, 0x21u, 0x13u, 0x07u, 0x15u, 0x14u, 0x37u, 0x23u, 0x24u, 0x27u, 0x10u, 0x35u, 0x08u, 0x01u, 0x0du, 0x0au, 0x2cu, 0x09u, 0x3fu, 0x2au, 0x29u, 0x1eu, 0x02u, 0x28u, 0x2du, 0x0bu, 0x17u, 0x0fu, 0x20u, 0x1cu, 0x3au, 0x1au, 0x36u, 0x1du, 0x22u, 0x0eu, 0x1fu, 0x2bu, 0x3eu, 0x19u, 0x39u, 0x18u, 0x04u, 0x31u, 0x05u, 0x03u, 0x33u, 0x16u, 0x2fu, 0x2eu, 0x12u, 0x38u, 0x3bu, 0x1bu, 0x32u, 0x00u, 0x3du, 0x11u, 0x26u, 0x3cu, 0x34u, 0x06u },
	std::array<qpl::u8, 64> { 0x09u, 0x18u, 0x06u, 0x0cu, 0x05u, 0x23u, 0x14u, 0x02u, 0x35u, 0x03u, 0x30u, 0x20u, 0x28u, 0x32u, 0x1cu, 0x3au, 0x2fu, 0x29u, 0x0du, 0x2du, 0x2cu, 0x13u, 0x3bu, 0x31u, 0x11u, 0x07u, 0x19u, 0x27u, 0x0au, 0x3cu, 0x21u, 0x16u, 0x1au, 0x00u, 0x2bu, 0x38u, 0x37u, 0x26u, 0x12u, 0x0fu, 0x3du, 0x15u, 0x17u, 0x33u, 0x1fu, 0x3fu, 0x2au, 0x0bu, 0x01u, 0x34u, 0x1bu, 0x24u, 0x08u, 0x1eu, 0x2eu, 0x39u, 0x10u, 0x0eu, 0x25u, 0x3eu, 0x04u, 0x36u, 0x1du, 0x22u },
	std::array<qpl::u8, 64> { 0x0bu, 0x1du, 0x2cu, 0x39u, 0x26u, 0x23u, 0x1fu, 0x3bu, 0x15u, 0x0fu, 0x3du, 0x01u, 0x13u, 0x02u, 0x1cu, 0x08u, 0x36u, 0x1eu, 0x31u, 0x19u, 0x25u, 0x17u, 0x09u, 0x0du, 0x06u, 0x38u, 0x00u, 0x29u, 0x3eu, 0x3fu, 0x03u, 0x1bu, 0x3au, 0x12u, 0x21u, 0x3cu, 0x18u, 0x0cu, 0x07u, 0x28u, 0x2fu, 0x2bu, 0x35u, 0x34u, 0x11u, 0x33u, 0x0eu, 0x37u, 0x20u, 0x16u, 0x04u, 0x1au, 0x2au, 0x27u, 0x14u, 0x32u, 0x2du, 0x05u, 0x22u, 0x0au, 0x30u, 0x24u, 0x2eu, 0x10u },
	std::array<qpl::u8, 64> { 0x25u, 0x3au, 0x3du, 0x0au, 0x2du, 0x27u, 0x1cu, 0x1du, 0x17u, 0x08u, 0x06u, 0x12u, 0x07u, 0x36u, 0x0fu, 0x2fu, 0x32u, 0x19u, 0x24u, 0x21u, 0x23u, 0x37u, 0x3eu, 0x20u, 0x35u, 0x0bu, 0x09u, 0x00u, 0x1bu, 0x31u, 0x39u, 0x2cu, 0x22u, 0x3bu, 0x29u, 0x0cu, 0x28u, 0x03u, 0x1eu, 0x38u, 0x26u, 0x0du, 0x16u, 0x0eu, 0x10u, 0x15u, 0x11u, 0x33u, 0x13u, 0x1au, 0x2bu, 0x18u, 0x2au, 0x2eu, 0x30u, 0x34u, 0x14u, 0x3fu, 0x3cu, 0x02u, 0x1fu, 0x05u, 0x04u, 0x01u },
	std::array<qpl::u8, 64> { 0x35u, 0x3au, 0x20u, 0x06u, 0x08u, 0x2eu, 0x14u, 0x28u, 0x34u, 0x39u, 0x13u, 0x3cu, 0x00u, 0x37u, 0x25u, 0x0cu, 0x2fu, 0x05u, 0x30u, 0x19u, 0x31u, 0x3bu, 0x1du, 0x3du, 0x17u, 0x11u, 0x2bu, 0x0du, 0x18u, 0x0bu, 0x01u, 0x29u, 0x16u, 0x1fu, 0x3fu, 0x10u, 0x03u, 0x1au, 0x38u, 0x02u, 0x0fu, 0x24u, 0x1cu, 0x32u, 0x2au, 0x1eu, 0x36u, 0x1bu, 0x07u, 0x0eu, 0x22u, 0x26u, 0x27u, 0x2du, 0x09u, 0x04u, 0x2cu, 0x0au, 0x21u, 0x23u, 0x12u, 0x33u, 0x15u, 0x3eu },
	std::array<qpl::u8, 64> { 0x28u, 0x1au, 0x0eu, 0x38u, 0x15u, 0x1cu, 0x0cu, 0x19u, 0x35u, 0x3eu, 0x1fu, 0x3cu, 0x0du, 0x3au, 0x30u, 0x2bu, 0x3bu, 0x2eu, 0x33u, 0x03u, 0x3du, 0x11u, 0x10u, 0x09u, 0x2cu, 0x18u, 0x08u, 0x20u, 0x39u, 0x24u, 0x21u, 0x2fu, 0x27u, 0x06u, 0x0fu, 0x0bu, 0x29u, 0x1eu, 0x01u, 0x37u, 0x31u, 0x13u, 0x36u, 0x04u, 0x34u, 0x07u, 0x25u, 0x1bu, 0x00u, 0x22u, 0x1du, 0x17u, 0x0au, 0x2du, 0x2au, 0x32u, 0x26u, 0x14u, 0x23u, 0x16u, 0x05u, 0x02u, 0x3fu, 0x12u },
	std::array<qpl::u8, 64> { 0x06u, 0x26u, 0x34u, 0x0fu, 0x33u, 0x3eu, 0x15u, 0x3fu, 0x24u, 0x25u, 0x1eu, 0x0au, 0x38u, 0x18u, 0x10u, 0x3du, 0x03u, 0x01u, 0x11u, 0x27u, 0x35u, 0x28u, 0x3cu, 0x3bu, 0x2bu, 0x16u, 0x21u, 0x17u, 0x23u, 0x0du, 0x00u, 0x14u, 0x2cu, 0x0cu, 0x0bu, 0x31u, 0x22u, 0x2au, 0x12u, 0x37u, 0x04u, 0x02u, 0x1du, 0x2du, 0x29u, 0x32u, 0x30u, 0x2eu, 0x2fu, 0x19u, 0x07u, 0x1au, 0x13u, 0x39u, 0x1bu, 0x05u, 0x0eu, 0x08u, 0x20u, 0x09u, 0x1cu, 0x36u, 0x3au, 0x1fu },
	std::array<qpl::u8, 64> { 0x1bu, 0x3du, 0x18u, 0x31u, 0x37u, 0x07u, 0x2bu, 0x00u, 0x1fu, 0x12u, 0x03u, 0x23u, 0x09u, 0x05u, 0x3fu, 0x2eu, 0x11u, 0x26u, 0x14u, 0x27u, 0x29u, 0x24u, 0x0bu, 0x21u, 0x19u, 0x34u, 0x01u, 0x2du, 0x3eu, 0x3cu, 0x28u, 0x08u, 0x06u, 0x25u, 0x2au, 0x0eu, 0x32u, 0x38u, 0x13u, 0x0fu, 0x1eu, 0x17u, 0x1au, 0x10u, 0x30u, 0x04u, 0x22u, 0x3bu, 0x0du, 0x15u, 0x0au, 0x1cu, 0x35u, 0x36u, 0x2fu, 0x2cu, 0x02u, 0x33u, 0x20u, 0x1du, 0x16u, 0x3au, 0x39u, 0x0cu },
	std::array<qpl::u8, 64> { 0x13u, 0x25u, 0x1fu, 0x2fu, 0x1au, 0x21u, 0x32u, 0x3cu, 0x2cu, 0x28u, 0x3fu, 0x2du, 0x15u, 0x11u, 0x1bu, 0x38u, 0x07u, 0x18u, 0x3du, 0x3au, 0x1du, 0x05u, 0x01u, 0x14u, 0x20u, 0x04u, 0x22u, 0x39u, 0x24u, 0x2eu, 0x23u, 0x36u, 0x3bu, 0x33u, 0x1eu, 0x26u, 0x12u, 0x0cu, 0x2bu, 0x29u, 0x2au, 0x0fu, 0x0du, 0x08u, 0x19u, 0x35u, 0x27u, 0x1cu, 0x03u, 0x34u, 0x37u, 0x09u, 0x30u, 0x0au, 0x10u, 0x02u, 0x17u, 0x00u, 0x31u, 0x3eu, 0x06u, 0x16u, 0x0bu, 0x0eu },
	std::array<qpl::u8, 64> { 0x08u, 0x18u, 0x25u, 0x39u, 0x24u, 0x21u, 0x30u, 0x10u, 0x1bu, 0x0cu, 0x2au, 0x03u, 0x32u, 0x3du, 0x2bu, 0x3cu, 0x2du, 0x37u, 0x05u, 0x23u, 0x1cu, 0x02u, 0x1eu, 0x00u, 0x20u, 0x1du, 0x14u, 0x38u, 0x0eu, 0x31u, 0x0fu, 0x35u, 0x3au, 0x15u, 0x2cu, 0x36u, 0x13u, 0x01u, 0x28u, 0x33u, 0x11u, 0x09u, 0x06u, 0x1au, 0x0du, 0x26u, 0x0bu, 0x1fu, 0x3bu, 0x22u, 0x34u, 0x3eu, 0x3fu, 0x2fu, 0x16u, 0x12u, 0x17u, 0x2eu, 0x29u, 0x0au, 0x04u, 0x27u, 0x19u, 0x07u },
	std::array<qpl::u8, 64> { 0x14u, 0x20u, 0x21u, 0x39u, 0x2du, 0x26u, 0x3du, 0x0fu, 0x02u, 0x10u, 0x31u, 0x36u, 0x33u, 0x15u, 0x34u, 0x32u, 0x04u, 0x3au, 0x2au, 0x2bu, 0x16u, 0x29u, 0x1fu, 0x2eu, 0x19u, 0x3eu, 0x0bu, 0x24u, 0x0cu, 0x27u, 0x18u, 0x3fu, 0x2cu, 0x37u, 0x08u, 0x03u, 0x11u, 0x3bu, 0x1au, 0x0eu, 0x00u, 0x0du, 0x25u, 0x38u, 0x07u, 0x2fu, 0x06u, 0x23u, 0x22u, 0x13u, 0x17u, 0x3cu, 0x1bu, 0x30u, 0x05u, 0x09u, 0x35u, 0x1cu, 0x0au, 0x1du, 0x1eu, 0x28u, 0x01u, 0x12u },
	std::array<qpl::u8, 64> { 0x34u, 0x0au, 0x07u, 0x16u, 0x33u, 0x30u, 0x3au, 0x2du, 0x1fu, 0x39u, 0x3bu, 0x27u, 0x20u, 0x1bu, 0x14u, 0x1au, 0x04u, 0x24u, 0x0bu, 0x31u, 0x23u, 0x2fu, 0x26u, 0x05u, 0x3eu, 0x1eu, 0x2cu, 0x32u, 0x08u, 0x10u, 0x18u, 0x15u, 0x2eu, 0x1du, 0x11u, 0x0cu, 0x0eu, 0x1cu, 0x21u, 0x3cu, 0x36u, 0x3fu, 0x38u, 0x0fu, 0x03u, 0x19u, 0x37u, 0x13u, 0x02u, 0x01u, 0x2bu, 0x25u, 0x22u, 0x09u, 0x3du, 0x0du, 0x2au, 0x35u, 0x17u, 0x28u, 0x06u, 0x29u, 0x12u, 0x00u },
	std::array<qpl::u8, 64> { 0x38u, 0x20u, 0x31u, 0x0fu, 0x3cu, 0x3fu, 0x10u, 0x09u, 0x05u, 0x39u, 0x24u, 0x30u, 0x36u, 0x08u, 0x2au, 0x12u, 0x22u, 0x1au, 0x0bu, 0x34u, 0x35u, 0x0au, 0x1cu, 0x13u, 0x16u, 0x01u, 0x1bu, 0x0eu, 0x3au, 0x28u, 0x21u, 0x0cu, 0x3du, 0x1fu, 0x18u, 0x0du, 0x33u, 0x19u, 0x3bu, 0x1eu, 0x37u, 0x1du, 0x2du, 0x14u, 0x27u, 0x29u, 0x11u, 0x15u, 0x07u, 0x2cu, 0x25u, 0x02u, 0x2bu, 0x23u, 0x04u, 0x2fu, 0x03u, 0x32u, 0x00u, 0x3eu, 0x2eu, 0x17u, 0x26u, 0x06u },
};

constexpr auto tables16 = std::array{
	std::array<qpl::u8, 16> { 0x0bu, 0x08u, 0x05u, 0x0au, 0x00u, 0x01u, 0x0fu, 0x0cu, 0x03u, 0x07u, 0x0eu, 0x06u, 0x04u, 0x09u, 0x0du, 0x02u },
	std::array<qpl::u8, 16> { 0x08u, 0x05u, 0x0du, 0x09u, 0x07u, 0x0bu, 0x0eu, 0x01u, 0x0cu, 0x03u, 0x02u, 0x0au, 0x00u, 0x0fu, 0x06u, 0x04u },
	std::array<qpl::u8, 16> { 0x03u, 0x04u, 0x0du, 0x0cu, 0x09u, 0x06u, 0x0au, 0x0eu, 0x0bu, 0x00u, 0x0fu, 0x05u, 0x08u, 0x07u, 0x02u, 0x01u },
	std::array<qpl::u8, 16> { 0x0cu, 0x0du, 0x00u, 0x01u, 0x0fu, 0x09u, 0x07u, 0x04u, 0x0au, 0x02u, 0x0bu, 0x08u, 0x0eu, 0x05u, 0x06u, 0x03u },
	std::array<qpl::u8, 16> { 0x0cu, 0x00u, 0x09u, 0x01u, 0x02u, 0x03u, 0x05u, 0x06u, 0x0fu, 0x04u, 0x0eu, 0x07u, 0x0au, 0x08u, 0x0bu, 0x0du },
	std::array<qpl::u8, 16> { 0x04u, 0x0cu, 0x06u, 0x07u, 0x03u, 0x0eu, 0x0bu, 0x0fu, 0x00u, 0x01u, 0x09u, 0x0du, 0x08u, 0x02u, 0x05u, 0x0au },
	std::array<qpl::u8, 16> { 0x04u, 0x07u, 0x0fu, 0x08u, 0x09u, 0x02u, 0x01u, 0x06u, 0x0du, 0x0au, 0x0cu, 0x0eu, 0x05u, 0x03u, 0x0bu, 0x00u },
	std::array<qpl::u8, 16> { 0x02u, 0x04u, 0x0au, 0x08u, 0x03u, 0x07u, 0x01u, 0x0bu, 0x0eu, 0x0fu, 0x0du, 0x00u, 0x05u, 0x0cu, 0x09u, 0x06u },
	std::array<qpl::u8, 16> { 0x06u, 0x0eu, 0x0bu, 0x0fu, 0x05u, 0x01u, 0x07u, 0x08u, 0x0au, 0x0cu, 0x0du, 0x00u, 0x04u, 0x02u, 0x03u, 0x09u },
	std::array<qpl::u8, 16> { 0x04u, 0x07u, 0x05u, 0x0bu, 0x0du, 0x00u, 0x03u, 0x0eu, 0x0au, 0x0fu, 0x09u, 0x0cu, 0x08u, 0x06u, 0x02u, 0x01u },
	std::array<qpl::u8, 16> { 0x05u, 0x0fu, 0x0eu, 0x0cu, 0x01u, 0x03u, 0x0au, 0x00u, 0x06u, 0x02u, 0x07u, 0x0du, 0x09u, 0x04u, 0x0bu, 0x08u },
	std::array<qpl::u8, 16> { 0x05u, 0x07u, 0x00u, 0x04u, 0x0du, 0x0fu, 0x0cu, 0x0eu, 0x03u, 0x06u, 0x09u, 0x02u, 0x0bu, 0x0au, 0x08u, 0x01u },
	std::array<qpl::u8, 16> { 0x0au, 0x0du, 0x00u, 0x0fu, 0x0bu, 0x07u, 0x0cu, 0x01u, 0x04u, 0x05u, 0x02u, 0x06u, 0x03u, 0x09u, 0x08u, 0x0eu },
	std::array<qpl::u8, 16> { 0x0du, 0x07u, 0x0eu, 0x02u, 0x01u, 0x06u, 0x03u, 0x0cu, 0x0au, 0x08u, 0x05u, 0x0fu, 0x0bu, 0x04u, 0x00u, 0x09u },
	std::array<qpl::u8, 16> { 0x07u, 0x08u, 0x09u, 0x04u, 0x0du, 0x03u, 0x0fu, 0x05u, 0x0bu, 0x0eu, 0x06u, 0x00u, 0x01u, 0x02u, 0x0cu, 0x0au },
	std::array<qpl::u8, 16> { 0x05u, 0x0eu, 0x09u, 0x04u, 0x06u, 0x01u, 0x0au, 0x03u, 0x07u, 0x08u, 0x0fu, 0x0cu, 0x00u, 0x0bu, 0x02u, 0x0du },
};

constexpr auto tables16_inverse = std::array {
	std::array<qpl::u8, 16> { 0x04u, 0x05u, 0x0fu, 0x08u, 0x0cu, 0x02u, 0x0bu, 0x09u, 0x01u, 0x0du, 0x03u, 0x00u, 0x07u, 0x0eu, 0x0au, 0x06u },
	std::array<qpl::u8, 16> { 0x0cu, 0x07u, 0x0au, 0x09u, 0x0fu, 0x01u, 0x0eu, 0x04u, 0x00u, 0x03u, 0x0bu, 0x05u, 0x08u, 0x02u, 0x06u, 0x0du },
	std::array<qpl::u8, 16> { 0x09u, 0x0fu, 0x0eu, 0x00u, 0x01u, 0x0bu, 0x05u, 0x0du, 0x0cu, 0x04u, 0x06u, 0x08u, 0x03u, 0x02u, 0x07u, 0x0au },
	std::array<qpl::u8, 16> { 0x02u, 0x03u, 0x09u, 0x0fu, 0x07u, 0x0du, 0x0eu, 0x06u, 0x0bu, 0x05u, 0x08u, 0x0au, 0x00u, 0x01u, 0x0cu, 0x04u },
	std::array<qpl::u8, 16> { 0x01u, 0x03u, 0x04u, 0x05u, 0x09u, 0x06u, 0x07u, 0x0bu, 0x0du, 0x02u, 0x0cu, 0x0eu, 0x00u, 0x0fu, 0x0au, 0x08u },
	std::array<qpl::u8, 16> { 0x08u, 0x09u, 0x0du, 0x04u, 0x00u, 0x0eu, 0x02u, 0x03u, 0x0cu, 0x0au, 0x0fu, 0x06u, 0x01u, 0x0bu, 0x05u, 0x07u },
	std::array<qpl::u8, 16> { 0x0fu, 0x06u, 0x05u, 0x0du, 0x00u, 0x0cu, 0x07u, 0x01u, 0x03u, 0x04u, 0x09u, 0x0eu, 0x0au, 0x08u, 0x0bu, 0x02u },
	std::array<qpl::u8, 16> { 0x0bu, 0x06u, 0x00u, 0x04u, 0x01u, 0x0cu, 0x0fu, 0x05u, 0x03u, 0x0eu, 0x02u, 0x07u, 0x0du, 0x0au, 0x08u, 0x09u },
	std::array<qpl::u8, 16> { 0x0bu, 0x05u, 0x0du, 0x0eu, 0x0cu, 0x04u, 0x00u, 0x06u, 0x07u, 0x0fu, 0x08u, 0x02u, 0x09u, 0x0au, 0x01u, 0x03u },
	std::array<qpl::u8, 16> { 0x05u, 0x0fu, 0x0eu, 0x06u, 0x00u, 0x02u, 0x0du, 0x01u, 0x0cu, 0x0au, 0x08u, 0x03u, 0x0bu, 0x04u, 0x07u, 0x09u },
	std::array<qpl::u8, 16> { 0x07u, 0x04u, 0x09u, 0x05u, 0x0du, 0x00u, 0x08u, 0x0au, 0x0fu, 0x0cu, 0x06u, 0x0eu, 0x03u, 0x0bu, 0x02u, 0x01u },
	std::array<qpl::u8, 16> { 0x02u, 0x0fu, 0x0bu, 0x08u, 0x03u, 0x00u, 0x09u, 0x01u, 0x0eu, 0x0au, 0x0du, 0x0cu, 0x06u, 0x04u, 0x07u, 0x05u },
	std::array<qpl::u8, 16> { 0x02u, 0x07u, 0x0au, 0x0cu, 0x08u, 0x09u, 0x0bu, 0x05u, 0x0eu, 0x0du, 0x00u, 0x04u, 0x06u, 0x01u, 0x0fu, 0x03u },
	std::array<qpl::u8, 16> { 0x0eu, 0x04u, 0x03u, 0x06u, 0x0du, 0x0au, 0x05u, 0x01u, 0x09u, 0x0fu, 0x08u, 0x0cu, 0x07u, 0x00u, 0x02u, 0x0bu },
	std::array<qpl::u8, 16> { 0x0bu, 0x0cu, 0x0du, 0x05u, 0x03u, 0x07u, 0x0au, 0x00u, 0x01u, 0x02u, 0x0fu, 0x08u, 0x0eu, 0x04u, 0x09u, 0x06u },
	std::array<qpl::u8, 16> { 0x0cu, 0x05u, 0x0eu, 0x07u, 0x03u, 0x00u, 0x04u, 0x08u, 0x09u, 0x02u, 0x06u, 0x0du, 0x0bu, 0x0fu, 0x01u, 0x0au },
};

struct encryption {
	constexpr static qpl::size state_size = 64u;
	constexpr static qpl::size state_grid_length = qpl::size_cast(qpl::sqrt(state_size));
	constexpr static qpl::size rounds = 2;
	constexpr static qpl::size key_size = state_size;
	constexpr static qpl::size round_key_size = state_size * rounds;

	std::vector<qpl::u8> message;
	std::vector<qpl::u8> output;
	std::array<qpl::u8, state_size> state;
	std::array<qpl::u8, state_size> last_state;
	std::array<qpl::u8, round_key_size> round_key;
	qpl::size states = 0u;
	qpl::size state_ctr = 0u;

	void input_cipher_state() {
		auto index = this->state_ctr * this->state_size;
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			auto m = this->message[index + i];
			this->state[i] = m ^ this->last_state[i];
		}
	}
	void output_cipher_state() {
		auto index = this->state_ctr * this->state_size;
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->output[index + i] = this->state[i];
		}
	}
	void input_decipher_state() {
		auto index = this->state_ctr * this->state_size;
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			auto m = this->message[index + i];
			this->state[i] = m;
		}
	}
	void output_decipher_state() {
		auto index = this->state_ctr * this->state_size;
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->output[index + i] = this->state[i] ^ this->last_state[i];
		}
	}

	void rotate_bytes() {
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->state[i] = qpl::rotate_left(this->state[i], 1);
		}
	}
	void unrotate_bytes() {
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->state[i] = qpl::rotate_right(this->state[i], 1);
		}
	}

	void mix_bytes() {
		auto table_index = this->state_ctr % sbox.size();
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->state[i] = sbox[table_index][this->state[i]];
		}
	}
	void unmix_bytes() {
		auto table_index = this->state_ctr % sbox_inverse.size();
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->state[i] = sbox_inverse[table_index][this->state[i]];
		}
	}

	void shuffle_rows(qpl::size round) {
		auto round_mod = qpl::u8_cast(round % sbox.size());

		std::array<qpl::u8, this->state_size> copy{};
		for (qpl::size c = 0u; c < this->state_grid_length; ++c) {
			//auto table_index = (round_mod ^ tables256[round_mod][c]);
			//const auto& row16 = tables16[table_index];
			const auto& row16 = tables16[0];

			std::array<qpl::u8, this->state_grid_length> row{};
			for (qpl::size i = 0u; i < row.size(); ++i) {
				for (qpl::size r = 0u; r < row.size(); ++r) {
					auto index = (r * this->state_grid_length + c);
					//row[i] ^= tables256[row16[i]][this->state[index]];
					row[i] ^= this->state[index];
				}
			}

			for (qpl::size r = 0u; r < row.size(); ++r) {
				auto index = (c * this->state_grid_length + r);
				copy[index] = row[r];
			}
		}
		this->state = copy;
	}	
	void unshuffle_rows(qpl::size round) {
		auto round_mod = qpl::u8_cast(round % sbox_inverse.size());

		std::array<qpl::u8, this->state_size> copy{};
		for (qpl::size c = 0u; c < this->state_grid_length; ++c) {
			//auto table_index = (round_mod ^ tables256_inverse[round_mod][c]);
			//const auto& row16 = tables16_inverse[table_index];
			const auto& row16 = tables16_inverse[0];

			std::array<qpl::u8, this->state_grid_length> row{};
			for (qpl::size i = 0u; i < row.size(); ++i) {
				for (qpl::size r = 0u; r < row.size(); ++r) {
					auto index = (r * this->state_grid_length + c);
					//row[i] ^= tables256_inverse[row16[i]][this->state[index]];
					row[i] ^= this->state[index];
				}
			}

			for (qpl::size r = 0u; r < row.size(); ++r) {
				auto index = (c * this->state_grid_length + r);
				copy[index] = row[r];
			}
		}
		this->state = copy;
	}

	void apply_round_key(qpl::size round) {
		for (qpl::size i = 0u; i < this->state_size; ++i) {
			this->state[i] ^= this->round_key[round * this->key_size + i];
		}
	}

	void cipher_rotation() {
		for (qpl::size round = 0u; round < this->rounds; ++round) {
			this->rotate_bytes();
			this->mix_bytes();
			this->shuffle_rows(round);
			this->apply_round_key(round);
		}
	}
	void decipher_rotation() {
		for (qpl::isize round = this->rounds - 1; round >= 0; --round) {
			this->apply_round_key(qpl::size_cast(round));
			this->unshuffle_rows(qpl::size_cast(round));
			this->unmix_bytes();
			this->unrotate_bytes();
		}
	}

	void cipher() {
		this->last_state.fill(0u);
		for (this->state_ctr = 0u; this->state_ctr < this->states; ++this->state_ctr) {

			this->input_cipher_state();
			this->last_state = this->state;

			this->cipher_rotation();
			this->output_cipher_state();

		}
	}
	void decipher() {
		this->state.fill(0u);
		for (this->state_ctr = 0u; this->state_ctr < this->states; ++this->state_ctr) {

			this->last_state = this->state;
			this->input_decipher_state();

			this->decipher_rotation();
			this->output_decipher_state();
		}
	}

	void create_round_key(const std::string_view& key) {
		std::array<qpl::u8, this->key_size> last_key_state{};
		std::array<qpl::u8, this->key_size> key_state{};

		for (qpl::size i = 0u; i < qpl::min(key.length(), this->key_size); ++i) {
			key_state[i] = key[i];
		}

		for (qpl::size round = 0u; round < this->rounds; ++round) {
			auto round_mod = qpl::u8_cast(round % sbox.size());
			const auto& b16 = tables16[(round ^ sbox[ round_mod][key_state[round]]) % tables16.size()];
			const auto& i16 = tables16[(round ^ sbox[~round_mod][key_state[round]]) % tables16.size()];

			for (qpl::size i = 0u; i < this->key_size; ++i) {
				auto index0 = sbox[i16[0]][i];
				auto index1 = sbox[i16[1]][i];
				auto index2 = sbox[i16[2]][i];
				auto index3 = sbox[i16[3]][i];

				auto byte0 = sbox[b16[0]][key_state[i]] ^ sbox[b16[1]][index0];
				auto byte1 = sbox[b16[2]][key_state[i]] ^ sbox[b16[3]][index1];
				auto byte2 = sbox[b16[4]][key_state[i]] ^ sbox[b16[5]][index2];
				auto byte3 = sbox[b16[6]][key_state[i]] ^ sbox[b16[7]][index3];

				key_state[i] = byte0 ^ byte1 ^ byte2 ^ byte3;
			}
			for (qpl::size c = 0u; c < this->state_grid_length; ++c) {
				auto diagonal_hash = (round ^ sbox[round_mod][key_state[(c * this->state_grid_length + c)]]) % tables16.size();
				const auto& row16 = tables16[diagonal_hash];

				std::array<qpl::u8, this->state_grid_length> row{};
				for (qpl::size i = 0u; i < row.size(); ++i) {
					for (qpl::size r = 0u; r < row.size(); ++r) {
						auto index = (c * this->state_grid_length + r);
						row[i] ^= sbox[row16[i]][key_state[index]];
					}
				}

				for (qpl::size r = 0u; r < row.size(); ++r) {
					auto index = (c * this->state_grid_length + r);
					key_state[index] = row[r];
				}
			}
			for (qpl::size r = 0u; r < this->state_grid_length; ++r) {
				auto diagonal_hash = (round ^ sbox[round_mod][key_state[(r * this->state_grid_length + r)]]) % tables16.size();
				const auto& col16 = tables16[diagonal_hash];

				std::array<qpl::u8, this->state_grid_length> col{};
				for (qpl::size i = 0u; i < col.size(); ++i) {
					for (qpl::size c = 0u; c < col.size(); ++c) {
						auto index = (c * this->state_grid_length + r);
						col[i] ^= sbox[col16[i]][key_state[index]];
					}
				}

				for (qpl::size c = 0u; c < col.size(); ++c) {
					auto index = (c * this->state_grid_length + r);
					key_state[index] = col[c];
				}
			}

			auto index = round * this->key_size;
			for (qpl::size i = 0u; i < this->key_size; ++i) {
				this->round_key[index + i] = key_state[i] ^ last_key_state[i];
			}
			last_key_state = key_state;
		}
	}

	void set_input(const std::string_view& message) {
		this->states = ((message.length() - 1) / this->state_size + 1);
		auto output_size = this->states * this->state_size;

		this->message.resize(output_size);
		std::memcpy(this->message.data(), message.data(), message.length());

		this->output.resize(output_size);
	}
	std::string encrypt(const std::string_view& message, const std::string_view& key) {
		this->set_input(message);
		this->create_round_key(key);
		this->cipher();

		auto output_size = this->states * this->state_size;
		auto delta = output_size - message.length();
		std::string result;
		result.resize(output_size + 1);
		std::memcpy(result.data(), this->output.data(), this->output.size());
		result.back() = qpl::u8_cast(delta);
		return result;
	}

	std::string decrypt(const std::string_view& message, const std::string_view& key) {
		auto delta = qpl::u8_cast(message.back());

		this->set_input(message.substr(0u, message.length() - 1));
		this->create_round_key(key);
		this->decipher();

		auto output_size = this->states * this->state_size - delta;
		std::string result;
		result.resize(output_size);
		std::memcpy(result.data(), this->output.data(), output_size);
		return result;
	}
};

void check_avalanche(std::string message, std::string key) {

	auto encrypted = qpl::encrypted_keep_size(message, key);

	//qpl::size bits = 0u;
	//qpl::size decrypted_active_bits = 0u;
	//for (qpl::size i = 0u; i < encrypted.length(); ++i) {
	//	bits1 += qpl::number_of_set_bits(encrypted[i]);
	//	decrypted_active_bits += qpl::number_of_set_bits(decrypted[i]);
	//}

}

void check_encryption(std::string message, std::string key) {

	auto encrypted = qpl::encrypted_keep_size(message, key);
	auto decrypted = qpl::decrypted_keep_size(encrypted, key);

	if (decrypted != message) {
		qpl::println("message   : ", qpl::hex_string(message));
		qpl::println("encrypted : ", qpl::hex_string(encrypted));
		qpl::println("decrypted : ", qpl::hex_string(decrypted));
		qpl::println();
	}
}

void check_mistakes() {
	qpl::small_clock clock;

	qpl::size bytes = 0u;

	for (qpl::size i = 0u;; ++i) {
		auto l = qpl::random(2, 600);
		auto message = qpl::get_random_uppercase_string(l);
		check_encryption(message, "123");
		bytes += message.length();

		if (qpl::get_time_signal(0.5)) {
			auto byte_rate = qpl::size_cast(qpl::f64_cast(bytes) / clock.elapsed_f());
			qpl::println(qpl::memory_size_string(bytes), " (", qpl::memory_size_string(byte_rate), " / sec)");
		}
	}

}

template<qpl::size N, qpl::size M>
void make_tables() {
	auto print = [](std::array<qpl::u8, N> state) {
		std::ostringstream stream;
		stream << qpl::to_string("std::array<qpl::u8, ", N, "> { ");
		for (qpl::size i = 0u; i < state.size(); ++i) {
			if (i) {
				stream << ", ";
			}
			stream << qpl::to_string(qpl::hex_string(state[i], "0x", qpl::base_format::base36l, true), 'u');
		}
		stream << qpl::to_string(" },\n");
		return stream.str();
	};

	std::set<std::array<qpl::u8, N>> seen;

	std::string string;
	std::string inv_string;
	for (qpl::size generated = 0u; generated < M; ) {

		std::array<qpl::u8, N> state;
		std::array<qpl::u8, N> inverse;
		std::iota(state.begin(), state.end(), 0u);

		while (true) {
			qpl::shuffle(state);
			bool valid = true;
			for (qpl::size i = 0u; i < state.size(); ++i) {
				if (state[i] == i) {
					valid = false;
					break;
				}
			}
			if (valid) {
				break;
			}
		}

		if (seen.find(state) != seen.cend()) {
			qpl::println("already seen ", state);
			continue;
		}
		seen.insert(state);

		for (qpl::size i = 0u; i < state.size(); ++i) {
			inverse[state[i]] = i;
		}

		string += print(state);
		inv_string += print(inverse);

		for (qpl::size i = 0u; i < state.size(); ++i) {
			auto n = state[i];
			auto reverse = inverse[n];

			if (reverse != i) {
				qpl::println("invalid table");
			}
		}
		++generated;
	}

	qpl::println(string);
	qpl::println();
	qpl::println();
	qpl::println(inv_string);
}

void round_key() {

	encryption e;
	e.encrypt("hello", "122");

	std::string rk;
	rk.resize(encryption::key_size);
	std::memcpy(rk.data(), e.round_key.data(), encryption::key_size);
	qpl::println("ROUND_KEY = ", qpl::hex_string(rk));

}

template<qpl::size N>
auto apply_mds(std::array<qpl::u8, N * N> state, const mat<qpl::u8, N>& mat) {

	std::array<qpl::u8, N * N> result;
	for (qpl::size col = 0u; col < N; ++col) {

		for (qpl::size m = 0u; m < N; ++m) {
			qpl::u8 byte = 0;
			for (qpl::size row = 0u; row < N; ++row) {
				auto index = col * N + row;
				byte ^= galois::mul(mat[m][row], state[index]);
			}
			result[col * N + m] = byte;
		}
	}
	return result;
}

template<qpl::size N>
void test_mds(const mat<qpl::u8, N>& m) {

	std::array<qpl::u8, N * N> state;
	for (auto& i : state) {
		i = qpl::random(0, 255);
	}

	auto diffused = apply_mds(state, m);

	auto m_inv = galois_matrix_inverse(m);
	auto reverse = apply_mds(diffused, m_inv);

	if (reverse != state) {
		qpl::println("neq!");
		print_matrix(m);
		qpl::println();
		print_matrix(m_inv);
		for (auto& i : state) {
			qpl::print((int)i, " ");
		}
		qpl::println();
		for (auto& i : reverse) {
			qpl::print((int)i, " ");
		}
		qpl::println();
	}
	else {
		qpl::println("equal.");
	}
}

template<qpl::size N>
void find_mds() {

	mat<qpl::u8, N> m;
	//mat<qpl::u8, N> m =
	//{ {
	//	{2, 3, 1, 1},
	//	{1, 2, 3, 1},
	//	{1, 1, 2, 3},
	//	{3, 1, 1, 2},
	//} };

	std::array<qpl::u8, N> row;
	for (auto& i : row) {
		i = qpl::random(0, 255);
	}
	for (qpl::size c = 0u; c < N; ++c) {
		for (qpl::size i = 0u; i < N; ++i) {
			m[c][i] = row[i + c % N];
		}
	}

	auto n = galois_matrix_inverse(m);
	print_matrix(n);

	test_mds(m);

	//while (true) {
	//	find_mds<4u>();
	//}
}

int main() try {
	find_mds<4>();
	//check_encryption("123123", "123");
	//
	//check_mistakes();
}
catch (std::exception& any) {
	qpl::println("caught exception:\n", any.what());
	qpl::system_pause();
}